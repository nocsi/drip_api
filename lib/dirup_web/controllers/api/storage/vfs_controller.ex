defmodule DirupWeb.API.Storage.VFSController do
  use DirupWeb, :controller
  use OpenApiSpex.ControllerSpecs

  alias Dirup.Storage.VFS
  alias Dirup.Workspaces
  alias OpenApiSpex.Operation
  alias OpenApiSpex.Schema
  alias DirupWeb.API.Storage.VFSSchemas.{VFSListingResponse, VFSContentResponse, ErrorResponse}

  action_fallback DirupWeb.FallbackController

  tags(["Storage", "VFS"])

  operation(:index,
    summary: "List files with virtual files",
    description:
      "Lists all files in a directory including virtual documentation files generated by the VFS",
    parameters: [
      workspace_id: [in: :path, description: "Workspace ID", type: :string, required: true],
      path: [
        in: :query,
        description: "Directory path (defaults to /)",
        type: :string,
        required: false
      ]
    ],
    responses: [
      ok: {"Success", "application/json", VFSListingResponse},
      unauthorized: {"Unauthorized", "application/json", ErrorResponse},
      not_found: {"Workspace not found", "application/json", ErrorResponse}
    ]
  )

  def index(conn, %{"workspace_id" => workspace_id} = params) do
    path = Map.get(params, "path", "/")

    with {:ok, _workspace} <- authorize_workspace(conn, workspace_id),
         {:ok, listing} <- VFS.list_files(workspace_id, path) do
      render(conn, :index, listing: listing)
    end
  end

  operation(:show,
    summary: "Read virtual file content",
    description:
      "Reads the content of a virtual file. Only works for virtual files, not real files.",
    parameters: [
      workspace_id: [in: :path, description: "Workspace ID", type: :string, required: true],
      path: [in: :query, description: "Virtual file path", type: :string, required: true]
    ],
    responses: [
      ok: {"Success", "application/json", VFSContentResponse},
      unauthorized: {"Unauthorized", "application/json", ErrorResponse},
      not_found: {"File not found or not virtual", "application/json", ErrorResponse}
    ]
  )

  def show(conn, %{"workspace_id" => workspace_id, "path" => path}) do
    with {:ok, _workspace} <- authorize_workspace(conn, workspace_id),
         true <- VFS.virtual?(workspace_id, path) || {:error, :not_virtual},
         {:ok, content} <- VFS.read_file(workspace_id, path) do
      render(conn, :show, content: content, path: path)
    else
      {:error, :not_virtual} ->
        {:error, :not_found, "Only virtual files can be accessed through this endpoint"}

      error ->
        error
    end
  end

  defp authorize_workspace(conn, workspace_id) do
    # Get current user from conn
    user = conn.assigns[:current_user]

    if user do
      Workspaces.get_workspace(workspace_id, actor: user)
    else
      {:error, :unauthorized}
    end
  end
end
