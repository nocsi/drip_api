openapi: 3.0.0
info:
  title: Test API
  version: 1.0.0
  description: A simple test API for validating the OpenAPI generator

paths:
  /users:
    get:
      summary: List users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted

  /posts:
    get:
      summary: List posts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        bio:
          type: string
          description: User's biography
        age:
          type: integer
          minimum: 0
          maximum: 150
          description: User's age
        is_active:
          type: boolean
          default: true
          description: Whether the user account is active
        created_at:
          type: string
          format: date-time
          description: When the user was created
        updated_at:
          type: string
          format: date-time
          description: When the user was last updated
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
          description: Posts authored by this user

    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        bio:
          type: string
        age:
          type: integer
          minimum: 0
          maximum: 150

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        bio:
          type: string
        age:
          type: integer
          minimum: 0
          maximum: 150
        is_active:
          type: boolean

    Post:
      type: object
      required:
        - id
        - title
        - content
        - author_id
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the post
        title:
          type: string
          description: Post title
        content:
          type: string
          description: Post content
        published:
          type: boolean
          default: false
          description: Whether the post is published
        view_count:
          type: integer
          default: 0
          description: Number of views
        author_id:
          type: string
          format: uuid
          description: ID of the user who authored this post
        author:
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          description: When the post was created
        updated_at:
          type: string
          format: date-time
          description: When the post was last updated

    CreatePostRequest:
      type: object
      required:
        - title
        - content
        - author_id
      properties:
        title:
          type: string
        content:
          type: string
        published:
          type: boolean
          default: false
        author_id:
          type: string
          format: uuid

    Status:
      type: string
      enum:
        - active
        - inactive
        - pending
      description: Status enumeration

    Config:
      type: object
      properties:
        max_posts:
          type: integer
          default: 100
        features:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties: true