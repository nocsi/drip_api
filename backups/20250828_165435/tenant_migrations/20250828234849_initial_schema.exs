defmodule Dirup.Repo.TenantMigrations.InitialSchema do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:container_service_instances, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :team_id, :uuid, null: false
      add :name, :text, null: false
      add :folder_path, :text, null: false
      add :service_type, :text, null: false
      add :detection_confidence, :decimal
      add :status, :text, default: "detecting"
      add :container_id, :text
      add :image_id, :text
      add :deployment_config, :map, default: %{}
      add :port_mappings, :map, default: %{}
      add :environment_variables, :map, default: %{}
      add :volume_mounts, :map, default: %{}
      add :resource_limits, :map
      add :scaling_config, :map
      add :health_check_config, :map
      add :labels, :map, default: %{}
      add :network_config, :map, default: %{}
      add :folder_manifest_ld, :map
      add :infrastructure_graph, :map
      add :content_hash, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :deployed_at, :utc_datetime_usec
      add :last_health_check_at, :utc_datetime_usec
      add :stopped_at, :utc_datetime_usec
      add :workspace_id, :uuid, null: false
      add :created_by_id, :uuid
      add :topology_detection_id, :uuid
    end

    create index(:container_service_instances, [:team_id, :workspace_id, :folder_path],
             unique: true,
             prefix: prefix()
           )

    create index(:container_service_instances, [:team_id, :service_type], prefix: prefix())

    create index(:container_service_instances, [:team_id, :workspace_id, :status],
             prefix: prefix()
           )

    create table(:user_groups, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :group_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create table(:storage_resources, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :locator_id, :text, null: false
      add :file_name, :text, null: false
      add :mime_type, :text, null: false, default: "application/octet-stream"
      add :file_size, :bigint, null: false
      add :checksum, :text, null: false
      add :version, :text, null: false, default: "1"
      add :storage_backend, :text, null: false, default: "hybrid"
      add :storage_metadata, :map, default: %{}
      add :is_versioned, :boolean, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:storage_resources, [:created_at])

    create index(:storage_resources, [:is_versioned])

    create index(:storage_resources, [:checksum])

    create index(:storage_resources, [:file_size])

    create index(:storage_resources, [:mime_type])

    create index(:storage_resources, [:storage_backend])

    create index(:storage_resources, [:locator_id], unique: true)

    create table(:service_metrics, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :metric_type, :text, null: false
      add :value, :decimal, null: false
      add :unit, :text, null: false
      add :metadata, :map, default: %{}

      add :recorded_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :service_instance_id,
          references(:container_service_instances,
            column: :id,
            name: "service_metrics_service_instance_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:service_metrics, [:service_instance_id, :metric_type, :recorded_at])

    create index(:service_metrics, [:service_instance_id])

    create table(:notifications, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :sender_user_id, :uuid

      add :recipient_user_id,
          references(:users,
            column: :id,
            name: "notifications_recipient_user_id_fkey",
            type: :uuid
          ),
          null: false

      add :subject, :text, null: false
      add :body, :text, null: false
      add :read_at, :utc_datetime
      add :status, :text, null: false, default: "unread"
      add :processed, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:groups, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:user_groups, prefix: prefix()) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "user_groups_group_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :user_id,
             references(:users, column: :id, name: "user_groups_user_id_fkey", type: :uuid)
    end

    create unique_index(:user_groups, [:group_id, :user_id],
             name: "user_groups_unique_name_index"
           )

    alter table(:groups, prefix: prefix()) do
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:groups, [:name], name: "groups_unique_name_index")

    create table(:group_permissions, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :action, :text, null: false
      add :resource, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :group_id,
          references(:groups,
            column: :id,
            name: "group_permissions_group_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end

    create unique_index(:group_permissions, [:group_id, :resource, :action],
             name: "group_permissions_unique_group_permission_index"
           )
  end

  def down do
    drop_if_exists unique_index(:group_permissions, [:group_id, :resource, :action],
                     name: "group_permissions_unique_group_permission_index"
                   )

    drop constraint(:group_permissions, "group_permissions_group_id_fkey")

    drop table(:group_permissions, prefix: prefix())

    drop_if_exists unique_index(:groups, [:name], name: "groups_unique_name_index")

    alter table(:groups, prefix: prefix()) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :name
    end

    drop_if_exists unique_index(:user_groups, [:group_id, :user_id],
                     name: "user_groups_unique_name_index"
                   )

    drop constraint(:user_groups, "user_groups_group_id_fkey")

    drop constraint(:user_groups, "user_groups_user_id_fkey")

    alter table(:user_groups, prefix: prefix()) do
      modify :user_id, :uuid
      modify :group_id, :uuid
    end

    drop table(:groups, prefix: prefix())

    drop constraint(:notifications, "notifications_recipient_user_id_fkey")

    drop table(:notifications, prefix: prefix())

    drop_if_exists index(:service_metrics, [:service_instance_id])

    drop constraint(:service_metrics, "service_metrics_service_instance_id_fkey")

    drop_if_exists index(:service_metrics, [:service_instance_id, :metric_type, :recorded_at])

    drop table(:service_metrics, prefix: prefix())

    drop_if_exists index(:storage_resources, [:locator_id])

    drop_if_exists index(:storage_resources, [:storage_backend])

    drop_if_exists index(:storage_resources, [:mime_type])

    drop_if_exists index(:storage_resources, [:file_size])

    drop_if_exists index(:storage_resources, [:checksum])

    drop_if_exists index(:storage_resources, [:is_versioned])

    drop_if_exists index(:storage_resources, [:created_at])

    drop table(:storage_resources, prefix: prefix())

    drop table(:user_groups, prefix: prefix())

    drop_if_exists index(:container_service_instances, [:team_id, :workspace_id, :status],
                     prefix: prefix()
                   )

    drop_if_exists index(:container_service_instances, [:team_id, :service_type],
                     prefix: prefix()
                   )

    drop_if_exists index(:container_service_instances, [:team_id, :workspace_id, :folder_path],
                     prefix: prefix()
                   )

    drop table(:container_service_instances, prefix: prefix())
  end
end
