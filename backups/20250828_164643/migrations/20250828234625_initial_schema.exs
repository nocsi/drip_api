defmodule Dirup.Repo.Migrations.InitialSchema do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:container_service_instances, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :team_id, :uuid, null: false
      add :name, :text, null: false
      add :folder_path, :text, null: false
      add :service_type, :text, null: false
      add :detection_confidence, :decimal
      add :status, :text, default: "detecting"
      add :container_id, :text
      add :image_id, :text
      add :deployment_config, :map, default: %{}
      add :port_mappings, :map, default: %{}
      add :environment_variables, :map, default: %{}
      add :volume_mounts, :map, default: %{}
      add :resource_limits, :map
      add :scaling_config, :map
      add :health_check_config, :map
      add :labels, :map, default: %{}
      add :network_config, :map, default: %{}
      add :folder_manifest_ld, :map
      add :infrastructure_graph, :map
      add :content_hash, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :deployed_at, :utc_datetime_usec
      add :last_health_check_at, :utc_datetime_usec
      add :stopped_at, :utc_datetime_usec
      add :workspace_id, :uuid, null: false
      add :created_by_id, :uuid
      add :topology_detection_id, :uuid
    end

    create index(:container_service_instances, [:team_id, :workspace_id, :folder_path],
             unique: true
           )

    create index(:container_service_instances, [:team_id, :service_type])

    create index(:container_service_instances, [:team_id, :workspace_id, :status])

    create table(:invitations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :invited_user_id, :uuid, null: false
      add :inviter_user_id, :uuid, null: false
      add :team_id, :uuid, null: false
    end

    create table(:deployment_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :event_type, :text, null: false
      add :event_data, :map, default: %{}
      add :duration_ms, :bigint
      add :sequence_number, :bigint, null: false

      add :occurred_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :status, :text, default: "success"
      add :error_details, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :service_instance_id, :uuid, null: false
      add :workspace_id, :uuid, null: false
      add :team_id, :uuid, null: false
      add :triggered_by_id, :uuid
    end

    create index(:deployment_events, [:team_id, :sequence_number, :service_instance_id],
             unique: true
           )

    create index(:deployment_events, [:team_id, :status, :occurred_at])

    create index(:deployment_events, [:team_id, :event_type, :occurred_at])

    create index(:deployment_events, [:team_id, :occurred_at])

    create index(:deployment_events, [:team_id, :workspace_id, :occurred_at])

    create index(:deployment_events, [:team_id, :service_instance_id, :occurred_at])

    create table(:tokens, primary_key: false) do
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:file_media, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "image"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id, :uuid, null: false
      add :user_id, :uuid
      add :file_id, :uuid, null: false
      add :media_id, :uuid
    end

    create index(:file_media, [:created_at])

    create index(:file_media, [:relationship_type])

    create index(:file_media, [:media_id])

    create index(:file_media, [:file_id, :relationship_type])

    create index(:file_media, [:file_id, :is_primary])

    create index(:file_media, [:file_id, :media_id])

    create table(:file_notebooks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "notebook"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id, :uuid, null: false
      add :user_id, :uuid
      add :file_id, :uuid, null: false
      add :notebook_id, :uuid
    end

    create index(:file_notebooks, [:created_at])

    create index(:file_notebooks, [:relationship_type])

    create index(:file_notebooks, [:file_id, :relationship_type])

    create index(:file_notebooks, [:file_id, :is_primary])

    create table(:billing_customers, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :user_id, :uuid, null: false
      add :stripe_customer_id, :text
      add :apple_user_id, :text
      add :email, :text, null: false
      add :name, :text
      add :provider, :text
      add :metadata, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:workspace_tasks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :workspace_id, :uuid
      add :name, :text, null: false
      add :is_name_generated, :boolean, null: false, default: false
      add :language, :text
      add :code, :text, null: false
      add :description, :text
      add :line_start, :bigint
      add :line_end, :bigint
      add :order_index, :bigint, null: false, default: 0
      add :execution_count, :bigint, null: false, default: 0
      add :last_execution_status, :text
      add :last_execution_output, :text
      add :last_execution_error, :text
      add :execution_time_ms, :bigint
      add :is_executable, :boolean, null: false, default: true
      add :requires_input, :boolean, null: false, default: false
      add :dependencies, {:array, :text}, default: []
      add :environment_variables, :map, default: %{}
      add :working_directory, :text
      add :timeout_seconds, :bigint, default: 30
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_executed_at, :utc_datetime_usec
      add :notebook_id, :uuid, null: false
    end

    create table(:billing_subscriptions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :provider, :text, null: false, default: "stripe"
      add :stripe_subscription_id, :text
      add :apple_transaction_id, :text
      add :apple_original_transaction_id, :text
      add :apple_product_id, :text
      add :apple_receipt_data, :text
      add :google_purchase_token, :text
      add :google_product_id, :text
      add :status, :text, null: false, default: "active"
      add :current_period_start, :utc_datetime, null: false
      add :current_period_end, :utc_datetime, null: false
      add :trial_start, :utc_datetime
      add :trial_end, :utc_datetime
      add :canceled_at, :utc_datetime
      add :expires_at, :utc_datetime
      add :cancel_at_period_end, :boolean, default: false
      add :auto_renew_enabled, :boolean, default: true
      add :quantity, :bigint, default: 1
      add :apple_auto_renew_status, :boolean
      add :apple_expiration_intent, :bigint
      add :apple_grace_period_expires_date, :utc_datetime
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, :uuid, null: false
      add :customer_id, :uuid, null: false
      add :plan_id, :uuid, null: false
    end

    create table(:service_instances, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:deployment_events) do
      modify :service_instance_id,
             references(:service_instances,
               column: :id,
               name: "deployment_events_service_instance_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:service_instances) do
      add :name, :text, null: false
      add :folder_path, :text, null: false
      add :service_type, :text, null: false
      add :detection_confidence, :decimal, default: "0.0"
      add :status, :text, null: false, default: "deployable"
      add :container_id, :text
      add :image_id, :text
      add :deployment_config, :map, default: %{}
      add :port_mappings, :map, default: %{}
      add :environment_variables, :map, default: %{}
      add :resource_limits, :map
      add :scaling_config, :map
      add :health_check_config, :map
      add :deployed_at, :utc_datetime_usec
      add :last_health_check_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :workspace_id, :uuid, null: false
      add :team_id, :uuid, null: false
      add :diruplogy_detection_id, :uuid
    end

    create index(:service_instances, [:team_id, :service_type, :status])

    create index(:service_instances, [:team_id, :status, :updated_at])

    create index(:service_instances, [:team_id, :status])

    create index(:service_instances, [:team_id, :workspace_id, :service_type])

    create index(:service_instances, [:team_id, :workspace_id, :status])

    create index(:service_instances, [:team_id, :workspace_id, :name], unique: true)

    create table(:workspace_load_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :event_type, :text, null: false
      add :event_data, :map, default: %{}
      add :path, :text
      add :error_message, :text
      add :task_name, :text
      add :task_workspace_id, :text
      add :is_task_name_generated, :boolean
      add :processing_time_ms, :bigint
      add :sequence_number, :bigint, null: false, default: 0

      add :occurred_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :workspace_id, :uuid, null: false
      add :notebook_id, :uuid
      add :task_id, :uuid
    end

    create table(:workspaces, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:deployment_events) do
      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "deployment_events_workspace_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:workspace_tasks) do
      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "workspace_tasks_workspace_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:service_instances) do
      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "service_instances_workspace_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:workspace_load_events) do
      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "workspace_load_events_workspace_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:workspaces) do
      add :name, :text, null: false
      add :description, :text
      add :status, :text, null: false, default: "active"
      add :storage_backend, :text, null: false, default: "hybrid"
      add :settings, :map, default: %{}
      add :tags, {:array, :text}, default: []
      add :storage_path, :text
      add :storage_metadata, :map, default: %{}
      add :git_repository_url, :text
      add :git_branch, :text, default: "main"
      add :archived_at, :utc_datetime_usec
      add :deleted_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id, :uuid, null: false
      add :created_by_id, :uuid
    end

    create index(:workspaces, [:team_id, :created_at])

    create index(:workspaces, [:team_id, :updated_at])

    create index(:workspaces, [:team_id, :storage_backend])

    create index(:workspaces, [:team_id, :status])

    create index(:workspaces, [:team_id, :name], unique: true)

    create table(:teams, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:container_service_instances) do
      modify :team_id,
             references(:teams,
               column: :id,
               name: "container_service_instances_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "container_service_instances_workspace_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:deployment_events) do
      modify :team_id,
             references(:teams,
               column: :id,
               name: "deployment_events_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:file_media) do
      modify :team_id,
             references(:teams, column: :id, name: "file_media_team_id_fkey", type: :uuid)
    end

    alter table(:file_notebooks) do
      modify :team_id,
             references(:teams, column: :id, name: "file_notebooks_team_id_fkey", type: :uuid)
    end

    alter table(:service_instances) do
      modify :team_id,
             references(:teams,
               column: :id,
               name: "service_instances_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:workspaces) do
      modify :team_id,
             references(:teams,
               column: :id,
               name: "workspaces_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:teams) do
      add :name, :text, null: false
      add :domain, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_user_id, :uuid
    end

    create table(:health_checks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :check_type, :text, default: "http"
      add :endpoint, :text
      add :status, :text, null: false
      add :response_time_ms, :bigint
      add :status_code, :bigint
      add :response_body, :text
      add :error_message, :text

      add :checked_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :service_instance_id,
          references(:container_service_instances,
            column: :id,
            name: "health_checks_service_instance_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:health_checks, [:service_instance_id, :status])

    create index(:health_checks, [:service_instance_id, :checked_at])

    create index(:health_checks, [:service_instance_id])

    create table(:user_identities, primary_key: false) do
      add :refresh_token, :text
      add :access_token_expires_at, :utc_datetime_usec
      add :access_token, :text
      add :uid, :text, null: false
      add :strategy, :text, null: false
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :user_id, :uuid
    end

    create table(:roles, primary_key: false) do
      add :name, :text, null: false, primary_key: true
    end

    create table(:blobs, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :hash, :text, null: false
      add :size, :bigint, null: false
      add :content_type, :text, null: false, default: "application/octet-stream"
      add :encoding, :text, default: "utf-8"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:blobs, [:created_at])

    create index(:blobs, [:size])

    create index(:blobs, [:content_type])

    create index(:blobs, [:hash], unique: true)

    create table(:project_tasks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :runme_id, :text
      add :name, :text, null: false
      add :is_name_generated, :boolean, null: false, default: false
      add :language, :text
      add :code, :text, null: false
      add :description, :text
      add :line_start, :bigint
      add :line_end, :bigint
      add :order_index, :bigint, null: false, default: 0
      add :execution_count, :bigint, null: false, default: 0
      add :last_execution_status, :text
      add :last_execution_output, :text
      add :last_execution_error, :text
      add :execution_time_ms, :bigint
      add :is_executable, :boolean, null: false, default: true
      add :requires_input, :boolean, null: false, default: false
      add :dependencies, {:array, :text}, default: []
      add :environment_variables, :map, default: %{}
      add :working_directory, :text
      add :timeout_seconds, :bigint, default: 30
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_executed_at, :utc_datetime_usec
      add :project_id, :uuid, null: false
      add :document_id, :uuid, null: false
    end

    create table(:notebooks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:workspace_tasks) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_tasks_notebook_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:workspace_tasks, [:notebook_id, :order_index],
             name: "workspace_tasks_unique_notebook_order_index"
           )

    create unique_index(:workspace_tasks, [:notebook_id, :workspace_id],
             name: "workspace_tasks_unique_notebook_workspace_id_index",
             where: "(workspace_id IS NOT NULL)"
           )

    alter table(:workspace_load_events) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_load_events_notebook_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :task_id,
             references(:workspace_tasks,
               column: :id,
               name: "workspace_load_events_task_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:workspace_load_events, [:workspace_id, :sequence_number],
             name: "workspace_load_events_unique_workspace_sequence_index"
           )

    alter table(:notebooks) do
      add :title, :text, null: false
      add :file_path, :text, null: false
      add :content, :text
      add :content_html, :text
      add :status, :text, null: false, default: "draft"
      add :execution_state, :map, default: %{}
      add :cells, {:array, :map}, default: []
      add :extracted_tasks, {:array, :map}, default: []
      add :execution_order, {:array, :text}, default: []
      add :current_task_index, :bigint, default: 0
      add :total_execution_time, :bigint, default: 0
      add :last_executed_at, :utc_datetime_usec
      add :execution_count, :bigint, null: false, default: 0
      add :auto_save_enabled, :boolean, null: false, default: true
      add :collaborative_mode, :boolean, null: false, default: false
      add :kernel_status, :text, default: "idle"
      add :environment_variables, :map, default: %{}
      add :execution_timeout, :bigint, default: 300
      add :render_cache, :map, default: %{}
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_accessed_at, :utc_datetime_usec
      add :file_id, :uuid, null: false
      add :workspace_id, :uuid, null: false
      add :team_id, :uuid, null: false
    end

    create index(:notebooks, [:team_id, :status])

    create index(:notebooks, [:team_id, :workspace_id, :updated_at])

    create index(:notebooks, [:team_id, :workspace_id, :status])

    create index(:notebooks, [:team_id, :file_id], unique: true)

    create table(:project_documents, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :path, :text, null: false
      add :absolute_path, :text, null: false
      add :filename, :text, null: false
      add :name, :text, null: false
      add :extension, :text, null: false, default: ".md"
      add :content, :text
      add :parsed_content, :map
      add :status, :text, null: false, default: "pending"
      add :error_message, :text
      add :size_bytes, :bigint
      add :line_count, :bigint
      add :task_count, :bigint, default: 0
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :parsed_at, :utc_datetime_usec
      add :modified_at, :utc_datetime_usec
      add :project_id, :uuid, null: false
    end

    create table(:user_teams, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :role, :text, null: false, default: "member"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, :uuid
      add :team_id, :uuid
    end

    create table(:service_dependencies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :dependency_type, :text, null: false
      add :connection_string, :text
      add :environment_variable, :text
      add :startup_order, :bigint, default: 0
      add :is_required, :boolean, null: false, default: true
      add :health_check_path, :text
      add :timeout_seconds, :bigint, default: 30
      add :retry_count, :bigint, default: 3
      add :dependency_metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :dependent_service_id,
          references(:service_instances,
            column: :id,
            name: "service_dependencies_dependent_service_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :required_service_id,
          references(:service_instances,
            column: :id,
            name: "service_dependencies_required_service_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "service_dependencies_workspace_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "service_dependencies_team_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:service_dependencies, [:team_id, :is_required, :workspace_id])

    create index(:service_dependencies, [:team_id, :startup_order, :workspace_id])

    create index(:service_dependencies, [:team_id, :dependency_type])

    create index(:service_dependencies, [:team_id, :workspace_id, :dependency_type])

    create index(:service_dependencies, [:team_id, :dependent_service_id, :required_service_id],
             unique: true
           )

    create index(:service_dependencies, [:team_id, :dependent_service_id])

    create index(:service_dependencies, [:team_id, :required_service_id])

    create index(:service_dependencies, [:team_id, :workspace_id])

    create index(:service_dependencies, [:team_id])

    create table(:media, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :title, :text, null: false
      add :description, :text
      add :alt_text, :text
      add :media_type, :text, null: false, default: "image"
      add :original_filename, :text, null: false
      add :file_size, :bigint, null: false
      add :mime_type, :text, null: false
      add :dimensions, :map, default: %{}
      add :metadata, :map, default: %{}
      add :dominant_colors, {:array, :text}, default: []
      add :accessibility_features, :map
      add :cdn_urls, :map, default: %{}
      add :processing_status, :text, null: false, default: "pending"

      add :team_id,
          references(:teams,
            column: :id,
            name: "media_team_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:media, [:team_id, :processing_status])

    create index(:media, [:team_id, :file_size])

    create index(:media, [:team_id, :mime_type])

    create index(:media, [:team_id, :created_at])

    create index(:media, [:team_id, :media_type])

    create index(:media, [:team_id])

    create table(:service_permissions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :permission_type, :text, null: false
      add :granted, :boolean, default: true

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, :uuid, null: false
      add :service_instance_id, :uuid, null: false
      add :granted_by_id, :uuid
    end

    create index(:service_permissions, [:user_id, :service_instance_id, :permission_type],
             unique: true
           )

    create table(:image_storages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "image"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams, column: :id, name: "image_storages_team_id_fkey", type: :uuid),
          null: false

      add :user_id, :uuid
      add :file_id, :uuid, null: false
      add :original_image_id, :uuid
    end

    create index(:image_storages, [:created_at])

    create index(:image_storages, [:processing_status])

    create index(:image_storages, [:media_type, :relationship_type])

    create index(:image_storages, [:file_id, :relationship_type])

    create index(:image_storages, [:file_id, :is_primary])

    create table(:collaboration_presences, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :status, :text, null: false, default: "online"
      add :user_agent, :text
      add :ip_address, :text
      add :client_info, :map, default: %{}
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :joined_at, :utc_datetime_usec, null: false
      add :left_at, :utc_datetime_usec
      add :last_seen_at, :utc_datetime_usec, null: false
      add :away_since, :utc_datetime_usec
      add :last_typing_at, :utc_datetime_usec
      add :session_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create index(:collaboration_presences, [:user_id, :status])

    create index(:collaboration_presences, [:session_id, :last_seen_at])

    create index(:collaboration_presences, [:session_id, :status])

    create index(:collaboration_presences, [:session_id, :user_id], unique: true)

    create table(:project_load_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :event_type, :text, null: false
      add :event_data, :map, default: %{}
      add :path, :text
      add :error_message, :text
      add :task_name, :text
      add :task_runme_id, :text
      add :is_task_name_generated, :boolean
      add :processing_time_ms, :bigint
      add :sequence_number, :bigint, null: false, default: 0

      add :occurred_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :project_id, :uuid, null: false
      add :document_id, :uuid
      add :task_id, :uuid
    end

    create table(:container_topology_detections, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :folder_path, :text, null: false

      add :detection_timestamp, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :detected_patterns, :map, default: %{}
      add :service_graph, :map, default: %{}
      add :recommended_services, {:array, :map}, default: []
      add :confidence_scores, :map, default: %{}
      add :file_indicators, {:array, :map}, default: []
      add :deployment_strategy, :text
      add :total_services_detected, :bigint, default: 0
      add :analysis_metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "container_topology_detections_workspace_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "container_topology_detections_team_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :triggered_by_id, :uuid
    end

    create index(:container_topology_detections, [
             :workspace_id,
             :folder_path,
             :detection_timestamp
           ])

    create index(:container_topology_detections, [:team_id, :workspace_id])

    create table(:billing_usage, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :user_id, :uuid, null: false
      add :subscription_id, :uuid
      add :resource_type, :text, null: false
      add :quantity, :decimal, null: false, default: "0"
      add :unit, :text, null: false
      add :metadata, :map, default: %{}
      add :period_start, :utc_datetime_usec, null: false
      add :period_end, :utc_datetime_usec, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:file_storages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "document"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams, column: :id, name: "file_storages_team_id_fkey", type: :uuid),
          null: false

      add :user_id, :uuid
      add :file_id, :uuid, null: false
    end

    create index(:file_storages, [:created_at])

    create index(:file_storages, [:processing_status])

    create index(:file_storages, [:media_type, :relationship_type])

    create index(:file_storages, [:storage_resource_id])

    create index(:file_storages, [:file_id, :relationship_type])

    create index(:file_storages, [:file_id, :is_primary])

    create index(:file_storages, [:file_id, :storage_resource_id])

    create table(:collaboration_operations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :operation_type, :text, null: false
      add :operation_data, :map, null: false
      add :version, :bigint, null: false
      add :position, :bigint
      add :length, :bigint
      add :content, :text
      add :status, :text, null: false, default: "pending"
      add :is_transformed, :boolean, null: false, default: false
      add :transformed_position, :bigint
      add :transformed_length, :bigint
      add :client_id, :text
      add :metadata, :map, default: %{}
      add :rejection_reason, :text

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :applied_at, :utc_datetime_usec
      add :rejected_at, :utc_datetime_usec
      add :session_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create index(:collaboration_operations, [:operation_type, :created_at])

    create index(:collaboration_operations, [:session_id, :user_id, :created_at])

    create index(:collaboration_operations, [:session_id, :created_at])

    create index(:collaboration_operations, [:session_id, :version])

    create table(:billing_invoices, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :user_id, :uuid, null: false
      add :subscription_id, :uuid
      add :customer_id, :uuid
      add :invoice_number, :text, null: false
      add :status, :text, default: "draft"
      add :currency, :text, default: "USD"
      add :subtotal, :decimal, null: false, default: "0"
      add :tax_amount, :decimal, null: false, default: "0"
      add :total, :decimal, null: false, default: "0"
      add :due_date, :date, null: false
      add :paid_at, :utc_datetime_usec
      add :billing_period_start, :date, null: false
      add :billing_period_end, :date, null: false
      add :line_items, {:array, :map}, default: []
      add :metadata, :map, default: %{}
      add :stripe_invoice_id, :text
      add :stripe_payment_intent_id, :text
      add :payment_method, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:collaboration_cursors, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :position, :bigint, null: false, default: 0
      add :selection_start, :bigint
      add :selection_end, :bigint
      add :selection_direction, :text, default: "none"
      add :cursor_color, :text
      add :is_active, :boolean, null: false, default: true
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_activity_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :session_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create index(:collaboration_cursors, [:session_id, :updated_at])

    create index(:collaboration_cursors, [:session_id, :is_active])

    create index(:collaboration_cursors, [:session_id, :user_id], unique: true)

    create table(:projects, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:project_tasks) do
      modify :project_id,
             references(:projects,
               column: :id,
               name: "project_tasks_project_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :document_id,
             references(:project_documents,
               column: :id,
               name: "project_tasks_document_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:project_tasks, [:document_id, :order_index],
             name: "project_tasks_unique_document_order_index"
           )

    create unique_index(:project_tasks, [:document_id, :runme_id],
             name: "project_tasks_unique_document_runme_id_index",
             where: "(runme_id IS NOT NULL)"
           )

    alter table(:project_documents) do
      modify :project_id,
             references(:projects,
               column: :id,
               name: "project_documents_project_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:project_documents, [:project_id, :path],
             name: "project_documents_unique_project_path_index"
           )

    alter table(:project_load_events) do
      modify :project_id,
             references(:projects,
               column: :id,
               name: "project_load_events_project_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :document_id,
             references(:project_documents,
               column: :id,
               name: "project_load_events_document_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :task_id,
             references(:project_tasks,
               column: :id,
               name: "project_load_events_task_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:project_load_events, [:project_id, :sequence_number],
             name: "project_load_events_unique_project_sequence_index"
           )

    alter table(:projects) do
      add :path, :text, null: false
      add :type, :text, null: false, default: "directory"
      add :name, :text, null: false
      add :status, :text, null: false, default: "loading"
      add :identity_mode, :text, null: false, default: "unspecified"
      add :options, :map, null: false, default: %{}
      add :error_message, :text
      add :document_count, :bigint, default: 0
      add :task_count, :bigint, default: 0

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id, :uuid, null: false
    end

    create table(:storage_content_addresses, primary_key: false) do
      add :content_hash, :text, null: false, primary_key: true
      add :content, :binary, null: false
      add :metadata_ld, :map, default: %{}
      add :size_bytes, :bigint, null: false
      add :reference_count, :bigint, null: false, default: 0

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:storage_content_addresses, [:content_hash],
             name: "storage_content_addresses_primary_index"
           )

    create table(:container_service_dependencies, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :dependency_type, :text, default: "requires"
      add :connection_string, :text
      add :environment_variable, :text
      add :startup_order, :bigint, default: 0

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :dependent_service_id,
          references(:container_service_instances,
            column: :id,
            name: "container_service_dependencies_dependent_service_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :required_service_id,
          references(:container_service_instances,
            column: :id,
            name: "container_service_dependencies_required_service_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:container_service_dependencies, [:dependent_service_id, :required_service_id],
             unique: true
           )

    create index(:container_service_dependencies, [:dependent_service_id])

    create index(:container_service_dependencies, [:required_service_id])

    create table(:container_deployment_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :team_id,
          references(:teams,
            column: :id,
            name: "container_deployment_events_team_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :event_type, :text, null: false
      add :event_data, :map, default: %{}
      add :error_message, :text
      add :error_details, :map, default: %{}
      add :duration_ms, :bigint
      add :sequence_number, :bigint, null: false

      add :occurred_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :service_instance_id,
          references(:container_service_instances,
            column: :id,
            name: "container_deployment_events_service_instance_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :triggered_by_id, :uuid
    end

    create index(:container_deployment_events, [:team_id, :event_type, :occurred_at])

    create index(:container_deployment_events, [:team_id, :service_instance_id, :occurred_at])

    create table(:collaboration_sessions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:collaboration_presences) do
      modify :session_id,
             references(:collaboration_sessions,
               column: :id,
               name: "collaboration_presences_session_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:collaboration_operations) do
      modify :session_id,
             references(:collaboration_sessions,
               column: :id,
               name: "collaboration_operations_session_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:collaboration_cursors) do
      modify :session_id,
             references(:collaboration_sessions,
               column: :id,
               name: "collaboration_cursors_session_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    alter table(:collaboration_sessions) do
      add :resource_type, :text, null: false
      add :resource_id, :uuid, null: false
      add :title, :text, null: false
      add :status, :text, null: false, default: "active"
      add :document_version, :bigint, null: false, default: 0
      add :content_state, :map, default: %{}
      add :participants_count, :bigint, null: false, default: 0
      add :max_participants, :bigint, default: 50
      add :settings, :map
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :started_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :ended_at, :utc_datetime_usec

      add :last_activity_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_id, :uuid, null: false
      add :team_id, :uuid, null: false
    end

    create table(:document_blob_refs, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :file_id, :uuid, null: false
      add :storage_resource_id, :uuid
      add :content_hash, :text
      add :content_size, :bigint
      add :is_primary, :boolean, default: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:billing_plans, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :code, :text, null: false
      add :name, :text, null: false
      add :description, :text
      add :tier, :text, null: false
      add :price_cents, :bigint, null: false, default: 0
      add :currency, :text, default: "USD"
      add :interval, :text, null: false, default: "monthly"
      add :trial_days, :bigint, default: 0
      add :active, :boolean, default: true
      add :max_notebooks, :bigint
      add :max_executions_per_month, :bigint
      add :max_ai_requests_per_month, :bigint
      add :max_storage_gb, :bigint
      add :max_collaborators, :bigint
      add :features, :map, default: %{}
      add :stripe_price_id, :text
      add :stripe_product_id, :text
      add :apple_product_id, :text
      add :metadata, :map, default: %{}

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:api_keys, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :api_key_hash, :binary, null: false
      add :expires_at, :utc_datetime_usec, null: false
      add :user_id, :uuid
    end

    create table(:files, primary_key: false) do
      add :description_html, :text
      add :content_html, :text
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:notebooks) do
      modify :file_id,
             references(:files, column: :id, name: "notebooks_file_id_fkey", type: :uuid)

      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "notebooks_workspace_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :team_id,
             references(:teams,
               column: :id,
               name: "notebooks_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create index(:notebooks, [:team_id, :workspace_id])

    create index(:notebooks, [:team_id])

    create unique_index(:notebooks, [:team_id, :file_id],
             name: "notebooks_unique_file_notebook_index"
           )

    alter table(:document_blob_refs) do
      modify :file_id,
             references(:files, column: :id, name: "document_blob_refs_file_id_fkey", type: :uuid)
    end

    alter table(:files) do
      add :name, :text, null: false
      add :file_path, :text, null: false
      add :content_type, :text, null: false, default: "text/plain"
      add :description, :text
      add :tags, {:array, :text}, default: []
      add :file_size, :bigint, default: 0
      add :storage_backend, :text, default: "hybrid"
      add :storage_metadata, :map, default: %{}
      add :version, :text
      add :checksum, :text
      add :is_directory, :boolean, null: false, default: false
      add :is_binary, :boolean, default: false
      add :is_notebook_file, :boolean, default: true
      add :render_cache, :map, default: %{}
      add :is_executable, :boolean, default: false
      add :execution_state, :map
      add :enlightenment_metadata, :map
      add :parsed_cells, {:array, :map}, default: []
      add :view_count, :bigint, default: 0
      add :last_viewed_at, :utc_datetime_usec
      add :deleted_at, :utc_datetime_usec

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "files_workspace_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          )

      add :parent_file_id,
          references(:files, column: :id, name: "files_parent_file_id_fkey", type: :uuid)

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_member_id,
          references(:user_teams,
            column: :id,
            name: "files_team_member_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "files_team_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:files, [:team_id, :parent_file_id])

    create index(:files, [:team_id, :workspace_id, :parent_file_id])

    create index(:files, [:team_id, :workspace_id, :updated_at])

    create index(:files, [:team_id, :workspace_id, :name])

    create index(:files, [:team_id, :workspace_id, :file_path], unique: true)

    create index(:files, [:team_id, :is_directory])

    create index(:files, [:team_id, :updated_at])

    create index(:files, [:team_id, :storage_backend])

    create index(:files, [:team_id, :content_type])

    create index(:files, [:team_id, :name])

    create index(:files, [:team_id, :file_path], unique: true)

    create index(:files, [:team_id, :workspace_id])

    create index(:files, [:team_id, :team_member_id])

    create index(:files, [:team_id])

    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:container_service_instances) do
      modify :created_by_id,
             references(:users,
               column: :id,
               name: "container_service_instances_created_by_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )

      modify :topology_detection_id,
             references(:container_topology_detections,
               column: :id,
               name: "container_service_instances_topology_detection_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:container_service_instances, [:team_id])

    create index(:container_service_instances, [:team_id, :workspace_id])

    create index(:container_service_instances, [:team_id, :topology_detection_id])

    alter table(:invitations) do
      modify :invited_user_id,
             references(:users,
               column: :id,
               name: "invitations_invited_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :inviter_user_id,
             references(:users,
               column: :id,
               name: "invitations_inviter_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :team_id,
             references(:teams,
               column: :id,
               name: "invitations_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create index(:invitations, [:team_id])

    create unique_index(:invitations, [:team_id, :invited_user_id],
             name: "invitations_unique_user_invitation_index"
           )

    alter table(:deployment_events) do
      modify :triggered_by_id,
             references(:users,
               column: :id,
               name: "deployment_events_triggered_by_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:deployment_events, [:team_id, :service_instance_id])

    create index(:deployment_events, [:team_id, :workspace_id])

    create index(:deployment_events, [:team_id])

    create index(:deployment_events, [:team_id, :triggered_by_id])

    alter table(:file_media) do
      modify :user_id,
             references(:users, column: :id, name: "file_media_user_id_fkey", type: :uuid)

      modify :file_id,
             references(:files,
               column: :id,
               name: "file_media_file_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :media_id,
             references(:media, column: :id, name: "file_media_media_id_fkey", type: :uuid)
    end

    create index(:file_media, [:storage_resource_id])

    create index(:file_media, [:file_id])

    alter table(:file_notebooks) do
      modify :user_id,
             references(:users, column: :id, name: "file_notebooks_user_id_fkey", type: :uuid)

      modify :file_id,
             references(:files,
               column: :id,
               name: "file_notebooks_file_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "file_notebooks_notebook_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create index(:file_notebooks, [:storage_resource_id])

    create index(:file_notebooks, [:file_id])

    create index(:file_notebooks, [:notebook_id])

    alter table(:billing_customers) do
      modify :user_id,
             references(:users, column: :id, name: "billing_customers_user_id_fkey", type: :uuid)
    end

    alter table(:billing_subscriptions) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "billing_subscriptions_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :customer_id,
             references(:billing_customers,
               column: :id,
               name: "billing_subscriptions_customer_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :plan_id,
             references(:billing_plans,
               column: :id,
               name: "billing_subscriptions_plan_id_fkey",
               type: :uuid,
               on_delete: :restrict
             )
    end

    create unique_index(:billing_subscriptions, [:apple_original_transaction_id],
             name: "billing_subscriptions_unique_apple_transaction_index",
             where: "(provider = 'apple')"
           )

    create unique_index(:billing_subscriptions, [:google_purchase_token],
             name: "billing_subscriptions_unique_google_purchase_index",
             where: "(provider = 'google')"
           )

    create unique_index(:billing_subscriptions, [:stripe_subscription_id],
             name: "billing_subscriptions_unique_stripe_subscription_index",
             where: "(provider = 'stripe')"
           )

    alter table(:workspaces) do
      modify :created_by_id,
             references(:users,
               column: :id,
               name: "workspaces_created_by_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:workspaces, [:team_id])

    create index(:workspaces, [:team_id, :created_by_id])

    alter table(:teams) do
      modify :owner_user_id,
             references(:users, column: :id, name: "teams_owner_user_id_fkey", type: :uuid)
    end

    alter table(:user_identities) do
      modify :user_id,
             references(:users, column: :id, name: "user_identities_user_id_fkey", type: :uuid)
    end

    create unique_index(:user_identities, [:strategy, :uid, :user_id],
             name: "user_identities_unique_on_strategy_and_uid_and_user_id_index"
           )

    alter table(:user_teams) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "user_teams_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :team_id,
             references(:teams,
               column: :id,
               name: "user_teams_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:user_teams, [:team_id, :user_id],
             name: "user_teams_unique_user_membership_index"
           )

    alter table(:service_permissions) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "service_permissions_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :service_instance_id,
             references(:container_service_instances,
               column: :id,
               name: "service_permissions_service_instance_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :granted_by_id,
             references(:users,
               column: :id,
               name: "service_permissions_granted_by_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:service_permissions, [:user_id])

    create index(:service_permissions, [:service_instance_id])

    alter table(:image_storages) do
      modify :user_id,
             references(:users, column: :id, name: "image_storages_user_id_fkey", type: :uuid)

      modify :file_id,
             references(:files,
               column: :id,
               name: "image_storages_file_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :original_image_id,
             references(:image_storages,
               column: :id,
               name: "image_storages_original_image_id_fkey",
               type: :uuid
             )
    end

    create index(:image_storages, [:storage_resource_id])

    create index(:image_storages, [:file_id])

    alter table(:collaboration_presences) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "collaboration_presences_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:collaboration_presences, [:session_id, :user_id],
             name: "collaboration_presences_unique_user_session_presence_index"
           )

    alter table(:container_topology_detections) do
      modify :triggered_by_id,
             references(:users,
               column: :id,
               name: "container_topology_detections_triggered_by_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:container_topology_detections, [:workspace_id])

    create index(:container_topology_detections, [:team_id])

    create index(:container_topology_detections, [:triggered_by_id])

    alter table(:billing_usage) do
      modify :user_id,
             references(:users, column: :id, name: "billing_usage_user_id_fkey", type: :uuid)

      modify :subscription_id,
             references(:billing_subscriptions,
               column: :id,
               name: "billing_usage_subscription_id_fkey",
               type: :uuid
             )
    end

    alter table(:file_storages) do
      modify :user_id,
             references(:users, column: :id, name: "file_storages_user_id_fkey", type: :uuid)

      modify :file_id,
             references(:files,
               column: :id,
               name: "file_storages_file_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create index(:file_storages, [:storage_resource_id])

    create index(:file_storages, [:file_id])

    alter table(:collaboration_operations) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "collaboration_operations_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:collaboration_operations, [:session_id, :version],
             name: "collaboration_operations_unique_session_version_index"
           )

    alter table(:billing_invoices) do
      modify :user_id,
             references(:users, column: :id, name: "billing_invoices_user_id_fkey", type: :uuid)

      modify :subscription_id,
             references(:billing_subscriptions,
               column: :id,
               name: "billing_invoices_subscription_id_fkey",
               type: :uuid
             )

      modify :customer_id,
             references(:billing_customers,
               column: :id,
               name: "billing_invoices_customer_id_fkey",
               type: :uuid
             )
    end

    alter table(:collaboration_cursors) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "collaboration_cursors_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:collaboration_cursors, [:session_id, :user_id],
             name: "collaboration_cursors_unique_user_session_cursor_index"
           )

    alter table(:projects) do
      modify :user_id,
             references(:users,
               column: :id,
               name: "projects_user_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:projects, [:user_id, :path], name: "projects_unique_user_path_index")

    alter table(:container_deployment_events) do
      modify :triggered_by_id,
             references(:users,
               column: :id,
               name: "container_deployment_events_triggered_by_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:container_deployment_events, [:team_id])

    create index(:container_deployment_events, [:team_id, :service_instance_id])

    create index(:container_deployment_events, [:team_id, :triggered_by_id])

    alter table(:collaboration_sessions) do
      modify :owner_id,
             references(:users,
               column: :id,
               name: "collaboration_sessions_owner_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )

      modify :team_id,
             references(:teams,
               column: :id,
               name: "collaboration_sessions_team_id_fkey",
               type: :uuid,
               on_delete: :delete_all
             )
    end

    create unique_index(:collaboration_sessions, [:resource_type, :resource_id, :status],
             name: "collaboration_sessions_unique_active_resource_index",
             where: "(status IN ('active', 'paused'))"
           )

    alter table(:api_keys) do
      modify :user_id, references(:users, column: :id, name: "api_keys_user_id_fkey", type: :uuid)
    end

    create unique_index(:api_keys, [:api_key_hash], name: "api_keys_unique_api_key_index")

    alter table(:users) do
      add :name, :text, null: false
      add :email, :citext, null: false
      add :current_team, :text
      add :hashed_password, :text
      add :picture, :text
      add :confirmed_at, :utc_datetime_usec
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:topology_detections, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:service_instances) do
      modify :diruplogy_detection_id,
             references(:topology_detections,
               column: :id,
               name: "service_instances_diruplogy_detection_id_fkey",
               type: :uuid,
               on_delete: :nilify_all
             )
    end

    create index(:service_instances, [:team_id, :workspace_id])

    create index(:service_instances, [:team_id])

    create index(:service_instances, [:team_id, :diruplogy_detection_id])

    alter table(:topology_detections) do
      add :folder_path, :text, null: false, default: "/"
      add :detection_timestamp, :utc_datetime_usec, null: false
      add :status, :text, null: false, default: "analyzing"
      add :detected_patterns, :map, default: %{}
      add :service_graph, :map
      add :recommended_services, {:array, :map}, default: []
      add :deployment_strategy, :text, default: "compose_stack"
      add :total_services_detected, :bigint, default: 0
      add :analysis_metadata, :map, default: %{}
      add :error_details, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "topology_detections_workspace_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "topology_detections_team_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false

      add :triggered_by_id,
          references(:users,
            column: :id,
            name: "topology_detections_triggered_by_id_fkey",
            type: :uuid,
            on_delete: :nilify_all
          )
    end

    create index(:topology_detections, [:team_id, :status, :created_at])

    create index(:topology_detections, [:team_id, :created_at])

    create index(:topology_detections, [:team_id, :workspace_id, :status])

    create index(:topology_detections, [:team_id, :workspace_id, :created_at])

    create index(:topology_detections, [:team_id, :workspace_id])

    create index(:topology_detections, [:team_id])

    create index(:topology_detections, [:team_id, :triggered_by_id])
  end

  def down do
    drop_if_exists index(:topology_detections, [:team_id, :triggered_by_id])

    drop_if_exists index(:topology_detections, [:team_id])

    drop_if_exists index(:topology_detections, [:team_id, :workspace_id])

    drop constraint(:topology_detections, "topology_detections_workspace_id_fkey")

    drop constraint(:topology_detections, "topology_detections_team_id_fkey")

    drop constraint(:topology_detections, "topology_detections_triggered_by_id_fkey")

    drop_if_exists index(:topology_detections, [:team_id, :workspace_id, :created_at])

    drop_if_exists index(:topology_detections, [:team_id, :workspace_id, :status])

    drop_if_exists index(:topology_detections, [:team_id, :created_at])

    drop_if_exists index(:topology_detections, [:team_id, :status, :created_at])

    alter table(:topology_detections) do
      remove :triggered_by_id
      remove :team_id
      remove :workspace_id
      remove :updated_at
      remove :created_at
      remove :error_details
      remove :analysis_metadata
      remove :total_services_detected
      remove :deployment_strategy
      remove :recommended_services
      remove :service_graph
      remove :detected_patterns
      remove :status
      remove :detection_timestamp
      remove :folder_path
    end

    drop_if_exists index(:service_instances, [:team_id, :diruplogy_detection_id])

    drop_if_exists index(:service_instances, [:team_id])

    drop_if_exists index(:service_instances, [:team_id, :workspace_id])

    drop constraint(:service_instances, "service_instances_diruplogy_detection_id_fkey")

    alter table(:service_instances) do
      modify :diruplogy_detection_id, :uuid
    end

    drop table(:topology_detections)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    alter table(:users) do
      remove :confirmed_at
      remove :picture
      remove :hashed_password
      remove :current_team
      remove :email
      remove :name
    end

    drop_if_exists unique_index(:api_keys, [:api_key_hash], name: "api_keys_unique_api_key_index")

    drop constraint(:api_keys, "api_keys_user_id_fkey")

    alter table(:api_keys) do
      modify :user_id, :uuid
    end

    drop_if_exists unique_index(:collaboration_sessions, [:resource_type, :resource_id, :status],
                     name: "collaboration_sessions_unique_active_resource_index"
                   )

    drop constraint(:collaboration_sessions, "collaboration_sessions_owner_id_fkey")

    drop constraint(:collaboration_sessions, "collaboration_sessions_team_id_fkey")

    alter table(:collaboration_sessions) do
      modify :team_id, :uuid
      modify :owner_id, :uuid
    end

    drop_if_exists index(:container_deployment_events, [:team_id, :triggered_by_id])

    drop_if_exists index(:container_deployment_events, [:team_id, :service_instance_id])

    drop_if_exists index(:container_deployment_events, [:team_id])

    drop constraint(
           :container_deployment_events,
           "container_deployment_events_triggered_by_id_fkey"
         )

    alter table(:container_deployment_events) do
      modify :triggered_by_id, :uuid
    end

    drop_if_exists unique_index(:projects, [:user_id, :path],
                     name: "projects_unique_user_path_index"
                   )

    drop constraint(:projects, "projects_user_id_fkey")

    alter table(:projects) do
      modify :user_id, :uuid
    end

    drop_if_exists unique_index(:collaboration_cursors, [:session_id, :user_id],
                     name: "collaboration_cursors_unique_user_session_cursor_index"
                   )

    drop constraint(:collaboration_cursors, "collaboration_cursors_user_id_fkey")

    alter table(:collaboration_cursors) do
      modify :user_id, :uuid
    end

    drop constraint(:billing_invoices, "billing_invoices_user_id_fkey")

    drop constraint(:billing_invoices, "billing_invoices_subscription_id_fkey")

    drop constraint(:billing_invoices, "billing_invoices_customer_id_fkey")

    alter table(:billing_invoices) do
      modify :customer_id, :uuid
      modify :subscription_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists unique_index(:collaboration_operations, [:session_id, :version],
                     name: "collaboration_operations_unique_session_version_index"
                   )

    drop constraint(:collaboration_operations, "collaboration_operations_user_id_fkey")

    alter table(:collaboration_operations) do
      modify :user_id, :uuid
    end

    drop_if_exists index(:file_storages, [:file_id])

    drop_if_exists index(:file_storages, [:storage_resource_id])

    drop constraint(:file_storages, "file_storages_user_id_fkey")

    drop constraint(:file_storages, "file_storages_file_id_fkey")

    alter table(:file_storages) do
      modify :file_id, :uuid
      modify :user_id, :uuid
    end

    drop constraint(:billing_usage, "billing_usage_user_id_fkey")

    drop constraint(:billing_usage, "billing_usage_subscription_id_fkey")

    alter table(:billing_usage) do
      modify :subscription_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists index(:container_topology_detections, [:triggered_by_id])

    drop_if_exists index(:container_topology_detections, [:team_id])

    drop_if_exists index(:container_topology_detections, [:workspace_id])

    drop constraint(
           :container_topology_detections,
           "container_topology_detections_triggered_by_id_fkey"
         )

    alter table(:container_topology_detections) do
      modify :triggered_by_id, :uuid
    end

    drop_if_exists unique_index(:collaboration_presences, [:session_id, :user_id],
                     name: "collaboration_presences_unique_user_session_presence_index"
                   )

    drop constraint(:collaboration_presences, "collaboration_presences_user_id_fkey")

    alter table(:collaboration_presences) do
      modify :user_id, :uuid
    end

    drop_if_exists index(:image_storages, [:file_id])

    drop_if_exists index(:image_storages, [:storage_resource_id])

    drop constraint(:image_storages, "image_storages_user_id_fkey")

    drop constraint(:image_storages, "image_storages_file_id_fkey")

    drop constraint(:image_storages, "image_storages_original_image_id_fkey")

    alter table(:image_storages) do
      modify :original_image_id, :uuid
      modify :file_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists index(:service_permissions, [:service_instance_id])

    drop_if_exists index(:service_permissions, [:user_id])

    drop constraint(:service_permissions, "service_permissions_user_id_fkey")

    drop constraint(:service_permissions, "service_permissions_service_instance_id_fkey")

    drop constraint(:service_permissions, "service_permissions_granted_by_id_fkey")

    alter table(:service_permissions) do
      modify :granted_by_id, :uuid
      modify :service_instance_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists unique_index(:user_teams, [:team_id, :user_id],
                     name: "user_teams_unique_user_membership_index"
                   )

    drop constraint(:user_teams, "user_teams_user_id_fkey")

    drop constraint(:user_teams, "user_teams_team_id_fkey")

    alter table(:user_teams) do
      modify :team_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists unique_index(:user_identities, [:strategy, :uid, :user_id],
                     name: "user_identities_unique_on_strategy_and_uid_and_user_id_index"
                   )

    drop constraint(:user_identities, "user_identities_user_id_fkey")

    alter table(:user_identities) do
      modify :user_id, :uuid
    end

    drop constraint(:teams, "teams_owner_user_id_fkey")

    alter table(:teams) do
      modify :owner_user_id, :uuid
    end

    drop_if_exists index(:workspaces, [:team_id, :created_by_id])

    drop_if_exists index(:workspaces, [:team_id])

    drop constraint(:workspaces, "workspaces_created_by_id_fkey")

    alter table(:workspaces) do
      modify :created_by_id, :uuid
    end

    drop_if_exists unique_index(:billing_subscriptions, [:stripe_subscription_id],
                     name: "billing_subscriptions_unique_stripe_subscription_index"
                   )

    drop_if_exists unique_index(:billing_subscriptions, [:google_purchase_token],
                     name: "billing_subscriptions_unique_google_purchase_index"
                   )

    drop_if_exists unique_index(:billing_subscriptions, [:apple_original_transaction_id],
                     name: "billing_subscriptions_unique_apple_transaction_index"
                   )

    drop constraint(:billing_subscriptions, "billing_subscriptions_user_id_fkey")

    drop constraint(:billing_subscriptions, "billing_subscriptions_customer_id_fkey")

    drop constraint(:billing_subscriptions, "billing_subscriptions_plan_id_fkey")

    alter table(:billing_subscriptions) do
      modify :plan_id, :uuid
      modify :customer_id, :uuid
      modify :user_id, :uuid
    end

    drop constraint(:billing_customers, "billing_customers_user_id_fkey")

    alter table(:billing_customers) do
      modify :user_id, :uuid
    end

    drop_if_exists index(:file_notebooks, [:notebook_id])

    drop_if_exists index(:file_notebooks, [:file_id])

    drop_if_exists index(:file_notebooks, [:storage_resource_id])

    drop constraint(:file_notebooks, "file_notebooks_user_id_fkey")

    drop constraint(:file_notebooks, "file_notebooks_file_id_fkey")

    drop constraint(:file_notebooks, "file_notebooks_notebook_id_fkey")

    alter table(:file_notebooks) do
      modify :notebook_id, :uuid
      modify :file_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists index(:file_media, [:file_id])

    drop_if_exists index(:file_media, [:storage_resource_id])

    drop constraint(:file_media, "file_media_user_id_fkey")

    drop constraint(:file_media, "file_media_file_id_fkey")

    drop constraint(:file_media, "file_media_media_id_fkey")

    alter table(:file_media) do
      modify :media_id, :uuid
      modify :file_id, :uuid
      modify :user_id, :uuid
    end

    drop_if_exists index(:deployment_events, [:team_id, :triggered_by_id])

    drop_if_exists index(:deployment_events, [:team_id])

    drop_if_exists index(:deployment_events, [:team_id, :workspace_id])

    drop_if_exists index(:deployment_events, [:team_id, :service_instance_id])

    drop constraint(:deployment_events, "deployment_events_triggered_by_id_fkey")

    alter table(:deployment_events) do
      modify :triggered_by_id, :uuid
    end

    drop_if_exists unique_index(:invitations, [:team_id, :invited_user_id],
                     name: "invitations_unique_user_invitation_index"
                   )

    drop_if_exists index(:invitations, [:team_id])

    drop constraint(:invitations, "invitations_invited_user_id_fkey")

    drop constraint(:invitations, "invitations_inviter_user_id_fkey")

    drop constraint(:invitations, "invitations_team_id_fkey")

    alter table(:invitations) do
      modify :team_id, :uuid
      modify :inviter_user_id, :uuid
      modify :invited_user_id, :uuid
    end

    drop_if_exists index(:container_service_instances, [:team_id, :topology_detection_id])

    drop_if_exists index(:container_service_instances, [:team_id, :workspace_id])

    drop_if_exists index(:container_service_instances, [:team_id])

    drop constraint(
           :container_service_instances,
           "container_service_instances_created_by_id_fkey"
         )

    drop constraint(
           :container_service_instances,
           "container_service_instances_topology_detection_id_fkey"
         )

    alter table(:container_service_instances) do
      modify :topology_detection_id, :uuid
      modify :created_by_id, :uuid
    end

    drop table(:users)

    drop_if_exists index(:files, [:team_id])

    drop_if_exists index(:files, [:team_id, :team_member_id])

    drop_if_exists index(:files, [:team_id, :workspace_id])

    drop constraint(:files, "files_workspace_id_fkey")

    drop constraint(:files, "files_parent_file_id_fkey")

    drop constraint(:files, "files_team_member_id_fkey")

    drop constraint(:files, "files_team_id_fkey")

    drop_if_exists index(:files, [:team_id, :file_path])

    drop_if_exists index(:files, [:team_id, :name])

    drop_if_exists index(:files, [:team_id, :content_type])

    drop_if_exists index(:files, [:team_id, :storage_backend])

    drop_if_exists index(:files, [:team_id, :updated_at])

    drop_if_exists index(:files, [:team_id, :is_directory])

    drop_if_exists index(:files, [:team_id, :workspace_id, :file_path])

    drop_if_exists index(:files, [:team_id, :workspace_id, :name])

    drop_if_exists index(:files, [:team_id, :workspace_id, :updated_at])

    drop_if_exists index(:files, [:team_id, :workspace_id, :parent_file_id])

    drop_if_exists index(:files, [:team_id, :parent_file_id])

    alter table(:files) do
      remove :team_id
      remove :team_member_id
      remove :updated_at
      remove :created_at
      remove :parent_file_id
      remove :workspace_id
      remove :deleted_at
      remove :last_viewed_at
      remove :view_count
      remove :parsed_cells
      remove :enlightenment_metadata
      remove :execution_state
      remove :is_executable
      remove :render_cache
      remove :is_notebook_file
      remove :is_binary
      remove :is_directory
      remove :checksum
      remove :version
      remove :storage_metadata
      remove :storage_backend
      remove :file_size
      remove :tags
      remove :description
      remove :content_type
      remove :file_path
      remove :name
    end

    drop constraint(:document_blob_refs, "document_blob_refs_file_id_fkey")

    alter table(:document_blob_refs) do
      modify :file_id, :uuid
    end

    drop_if_exists unique_index(:notebooks, [:team_id, :file_id],
                     name: "notebooks_unique_file_notebook_index"
                   )

    drop_if_exists index(:notebooks, [:team_id])

    drop_if_exists index(:notebooks, [:team_id, :workspace_id])

    drop constraint(:notebooks, "notebooks_file_id_fkey")

    drop constraint(:notebooks, "notebooks_workspace_id_fkey")

    drop constraint(:notebooks, "notebooks_team_id_fkey")

    alter table(:notebooks) do
      modify :team_id, :uuid
      modify :workspace_id, :uuid
      modify :file_id, :uuid
    end

    drop table(:files)

    drop table(:api_keys)

    drop table(:billing_plans)

    drop table(:document_blob_refs)

    alter table(:collaboration_sessions) do
      remove :team_id
      remove :owner_id
      remove :last_activity_at
      remove :ended_at
      remove :started_at
      remove :updated_at
      remove :created_at
      remove :metadata
      remove :settings
      remove :max_participants
      remove :participants_count
      remove :content_state
      remove :document_version
      remove :status
      remove :title
      remove :resource_id
      remove :resource_type
    end

    drop constraint(:collaboration_cursors, "collaboration_cursors_session_id_fkey")

    alter table(:collaboration_cursors) do
      modify :session_id, :uuid
    end

    drop constraint(:collaboration_operations, "collaboration_operations_session_id_fkey")

    alter table(:collaboration_operations) do
      modify :session_id, :uuid
    end

    drop constraint(:collaboration_presences, "collaboration_presences_session_id_fkey")

    alter table(:collaboration_presences) do
      modify :session_id, :uuid
    end

    drop table(:collaboration_sessions)

    drop constraint(:container_deployment_events, "container_deployment_events_team_id_fkey")

    drop constraint(
           :container_deployment_events,
           "container_deployment_events_service_instance_id_fkey"
         )

    drop_if_exists index(:container_deployment_events, [
                     :team_id,
                     :service_instance_id,
                     :occurred_at
                   ])

    drop_if_exists index(:container_deployment_events, [:team_id, :event_type, :occurred_at])

    drop table(:container_deployment_events)

    drop_if_exists index(:container_service_dependencies, [:required_service_id])

    drop_if_exists index(:container_service_dependencies, [:dependent_service_id])

    drop constraint(
           :container_service_dependencies,
           "container_service_dependencies_dependent_service_id_fkey"
         )

    drop constraint(
           :container_service_dependencies,
           "container_service_dependencies_required_service_id_fkey"
         )

    drop_if_exists index(:container_service_dependencies, [
                     :dependent_service_id,
                     :required_service_id
                   ])

    drop table(:container_service_dependencies)

    drop_if_exists unique_index(:storage_content_addresses, [:content_hash],
                     name: "storage_content_addresses_primary_index"
                   )

    drop table(:storage_content_addresses)

    alter table(:projects) do
      remove :user_id
      remove :updated_at
      remove :created_at
      remove :task_count
      remove :document_count
      remove :error_message
      remove :options
      remove :identity_mode
      remove :status
      remove :name
      remove :type
      remove :path
    end

    drop_if_exists unique_index(:project_load_events, [:project_id, :sequence_number],
                     name: "project_load_events_unique_project_sequence_index"
                   )

    drop constraint(:project_load_events, "project_load_events_project_id_fkey")

    drop constraint(:project_load_events, "project_load_events_document_id_fkey")

    drop constraint(:project_load_events, "project_load_events_task_id_fkey")

    alter table(:project_load_events) do
      modify :task_id, :uuid
      modify :document_id, :uuid
      modify :project_id, :uuid
    end

    drop_if_exists unique_index(:project_documents, [:project_id, :path],
                     name: "project_documents_unique_project_path_index"
                   )

    drop constraint(:project_documents, "project_documents_project_id_fkey")

    alter table(:project_documents) do
      modify :project_id, :uuid
    end

    drop_if_exists unique_index(:project_tasks, [:document_id, :runme_id],
                     name: "project_tasks_unique_document_runme_id_index"
                   )

    drop_if_exists unique_index(:project_tasks, [:document_id, :order_index],
                     name: "project_tasks_unique_document_order_index"
                   )

    drop constraint(:project_tasks, "project_tasks_project_id_fkey")

    drop constraint(:project_tasks, "project_tasks_document_id_fkey")

    alter table(:project_tasks) do
      modify :document_id, :uuid
      modify :project_id, :uuid
    end

    drop table(:projects)

    drop_if_exists index(:collaboration_cursors, [:session_id, :user_id])

    drop_if_exists index(:collaboration_cursors, [:session_id, :is_active])

    drop_if_exists index(:collaboration_cursors, [:session_id, :updated_at])

    drop table(:collaboration_cursors)

    drop table(:billing_invoices)

    drop_if_exists index(:collaboration_operations, [:session_id, :version])

    drop_if_exists index(:collaboration_operations, [:session_id, :created_at])

    drop_if_exists index(:collaboration_operations, [:session_id, :user_id, :created_at])

    drop_if_exists index(:collaboration_operations, [:operation_type, :created_at])

    drop table(:collaboration_operations)

    drop constraint(:file_storages, "file_storages_storage_resource_id_fkey")

    drop constraint(:file_storages, "file_storages_team_id_fkey")

    drop_if_exists index(:file_storages, [:file_id, :storage_resource_id])

    drop_if_exists index(:file_storages, [:file_id, :is_primary])

    drop_if_exists index(:file_storages, [:file_id, :relationship_type])

    drop_if_exists index(:file_storages, [:storage_resource_id])

    drop_if_exists index(:file_storages, [:media_type, :relationship_type])

    drop_if_exists index(:file_storages, [:processing_status])

    drop_if_exists index(:file_storages, [:created_at])

    drop table(:file_storages)

    drop table(:billing_usage)

    drop constraint(
           :container_topology_detections,
           "container_topology_detections_workspace_id_fkey"
         )

    drop constraint(:container_topology_detections, "container_topology_detections_team_id_fkey")

    drop_if_exists index(:container_topology_detections, [:team_id, :workspace_id])

    drop_if_exists index(:container_topology_detections, [
                     :workspace_id,
                     :folder_path,
                     :detection_timestamp
                   ])

    drop table(:container_topology_detections)

    drop table(:project_load_events)

    drop_if_exists index(:collaboration_presences, [:session_id, :user_id])

    drop_if_exists index(:collaboration_presences, [:session_id, :status])

    drop_if_exists index(:collaboration_presences, [:session_id, :last_seen_at])

    drop_if_exists index(:collaboration_presences, [:user_id, :status])

    drop table(:collaboration_presences)

    drop constraint(:image_storages, "image_storages_storage_resource_id_fkey")

    drop constraint(:image_storages, "image_storages_team_id_fkey")

    drop_if_exists index(:image_storages, [:file_id, :is_primary])

    drop_if_exists index(:image_storages, [:file_id, :relationship_type])

    drop_if_exists index(:image_storages, [:media_type, :relationship_type])

    drop_if_exists index(:image_storages, [:processing_status])

    drop_if_exists index(:image_storages, [:created_at])

    drop table(:image_storages)

    drop_if_exists index(:service_permissions, [:user_id, :service_instance_id, :permission_type])

    drop table(:service_permissions)

    drop_if_exists index(:media, [:team_id])

    drop constraint(:media, "media_team_id_fkey")

    drop_if_exists index(:media, [:team_id, :media_type])

    drop_if_exists index(:media, [:team_id, :created_at])

    drop_if_exists index(:media, [:team_id, :mime_type])

    drop_if_exists index(:media, [:team_id, :file_size])

    drop_if_exists index(:media, [:team_id, :processing_status])

    drop table(:media)

    drop_if_exists index(:service_dependencies, [:team_id])

    drop_if_exists index(:service_dependencies, [:team_id, :workspace_id])

    drop_if_exists index(:service_dependencies, [:team_id, :required_service_id])

    drop_if_exists index(:service_dependencies, [:team_id, :dependent_service_id])

    drop constraint(:service_dependencies, "service_dependencies_dependent_service_id_fkey")

    drop constraint(:service_dependencies, "service_dependencies_required_service_id_fkey")

    drop constraint(:service_dependencies, "service_dependencies_workspace_id_fkey")

    drop constraint(:service_dependencies, "service_dependencies_team_id_fkey")

    drop_if_exists index(:service_dependencies, [
                     :team_id,
                     :dependent_service_id,
                     :required_service_id
                   ])

    drop_if_exists index(:service_dependencies, [:team_id, :workspace_id, :dependency_type])

    drop_if_exists index(:service_dependencies, [:team_id, :dependency_type])

    drop_if_exists index(:service_dependencies, [:team_id, :startup_order, :workspace_id])

    drop_if_exists index(:service_dependencies, [:team_id, :is_required, :workspace_id])

    drop table(:service_dependencies)

    drop table(:user_teams)

    drop table(:project_documents)

    drop_if_exists index(:notebooks, [:team_id, :file_id])

    drop_if_exists index(:notebooks, [:team_id, :workspace_id, :status])

    drop_if_exists index(:notebooks, [:team_id, :workspace_id, :updated_at])

    drop_if_exists index(:notebooks, [:team_id, :status])

    alter table(:notebooks) do
      remove :team_id
      remove :workspace_id
      remove :file_id
      remove :last_accessed_at
      remove :updated_at
      remove :created_at
      remove :metadata
      remove :render_cache
      remove :execution_timeout
      remove :environment_variables
      remove :kernel_status
      remove :collaborative_mode
      remove :auto_save_enabled
      remove :execution_count
      remove :last_executed_at
      remove :total_execution_time
      remove :current_task_index
      remove :execution_order
      remove :extracted_tasks
      remove :cells
      remove :execution_state
      remove :status
      remove :content_html
      remove :content
      remove :file_path
      remove :title
    end

    drop_if_exists unique_index(:workspace_load_events, [:workspace_id, :sequence_number],
                     name: "workspace_load_events_unique_workspace_sequence_index"
                   )

    drop constraint(:workspace_load_events, "workspace_load_events_notebook_id_fkey")

    drop constraint(:workspace_load_events, "workspace_load_events_task_id_fkey")

    alter table(:workspace_load_events) do
      modify :task_id, :uuid
      modify :notebook_id, :uuid
    end

    drop_if_exists unique_index(:workspace_tasks, [:notebook_id, :workspace_id],
                     name: "workspace_tasks_unique_notebook_workspace_id_index"
                   )

    drop_if_exists unique_index(:workspace_tasks, [:notebook_id, :order_index],
                     name: "workspace_tasks_unique_notebook_order_index"
                   )

    drop constraint(:workspace_tasks, "workspace_tasks_notebook_id_fkey")

    alter table(:workspace_tasks) do
      modify :notebook_id, :uuid
    end

    drop table(:notebooks)

    drop table(:project_tasks)

    drop_if_exists index(:blobs, [:hash])

    drop_if_exists index(:blobs, [:content_type])

    drop_if_exists index(:blobs, [:size])

    drop_if_exists index(:blobs, [:created_at])

    drop table(:blobs)

    drop table(:roles)

    drop table(:user_identities)

    drop_if_exists index(:health_checks, [:service_instance_id])

    drop constraint(:health_checks, "health_checks_service_instance_id_fkey")

    drop_if_exists index(:health_checks, [:service_instance_id, :checked_at])

    drop_if_exists index(:health_checks, [:service_instance_id, :status])

    drop table(:health_checks)

    alter table(:teams) do
      remove :owner_user_id
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :domain
      remove :name
    end

    drop constraint(:workspaces, "workspaces_team_id_fkey")

    alter table(:workspaces) do
      modify :team_id, :uuid
    end

    drop constraint(:service_instances, "service_instances_team_id_fkey")

    alter table(:service_instances) do
      modify :team_id, :uuid
    end

    drop constraint(:file_notebooks, "file_notebooks_team_id_fkey")

    alter table(:file_notebooks) do
      modify :team_id, :uuid
    end

    drop constraint(:file_media, "file_media_team_id_fkey")

    alter table(:file_media) do
      modify :team_id, :uuid
    end

    drop constraint(:deployment_events, "deployment_events_team_id_fkey")

    alter table(:deployment_events) do
      modify :team_id, :uuid
    end

    drop constraint(:container_service_instances, "container_service_instances_team_id_fkey")

    drop constraint(:container_service_instances, "container_service_instances_workspace_id_fkey")

    alter table(:container_service_instances) do
      modify :workspace_id, :uuid
      modify :team_id, :uuid
    end

    drop table(:teams)

    drop_if_exists index(:workspaces, [:team_id, :name])

    drop_if_exists index(:workspaces, [:team_id, :status])

    drop_if_exists index(:workspaces, [:team_id, :storage_backend])

    drop_if_exists index(:workspaces, [:team_id, :updated_at])

    drop_if_exists index(:workspaces, [:team_id, :created_at])

    alter table(:workspaces) do
      remove :created_by_id
      remove :team_id
      remove :updated_at
      remove :created_at
      remove :deleted_at
      remove :archived_at
      remove :git_branch
      remove :git_repository_url
      remove :storage_metadata
      remove :storage_path
      remove :tags
      remove :settings
      remove :storage_backend
      remove :status
      remove :description
      remove :name
    end

    drop constraint(:workspace_load_events, "workspace_load_events_workspace_id_fkey")

    alter table(:workspace_load_events) do
      modify :workspace_id, :uuid
    end

    drop constraint(:service_instances, "service_instances_workspace_id_fkey")

    alter table(:service_instances) do
      modify :workspace_id, :uuid
    end

    drop constraint(:workspace_tasks, "workspace_tasks_workspace_id_fkey")

    alter table(:workspace_tasks) do
      modify :workspace_id, :uuid
    end

    drop constraint(:deployment_events, "deployment_events_workspace_id_fkey")

    alter table(:deployment_events) do
      modify :workspace_id, :uuid
    end

    drop table(:workspaces)

    drop table(:workspace_load_events)

    drop_if_exists index(:service_instances, [:team_id, :workspace_id, :name])

    drop_if_exists index(:service_instances, [:team_id, :workspace_id, :status])

    drop_if_exists index(:service_instances, [:team_id, :workspace_id, :service_type])

    drop_if_exists index(:service_instances, [:team_id, :status])

    drop_if_exists index(:service_instances, [:team_id, :status, :updated_at])

    drop_if_exists index(:service_instances, [:team_id, :service_type, :status])

    alter table(:service_instances) do
      remove :diruplogy_detection_id
      remove :team_id
      remove :workspace_id
      remove :updated_at
      remove :created_at
      remove :last_health_check_at
      remove :deployed_at
      remove :health_check_config
      remove :scaling_config
      remove :resource_limits
      remove :environment_variables
      remove :port_mappings
      remove :deployment_config
      remove :image_id
      remove :container_id
      remove :status
      remove :detection_confidence
      remove :service_type
      remove :folder_path
      remove :name
    end

    drop constraint(:deployment_events, "deployment_events_service_instance_id_fkey")

    alter table(:deployment_events) do
      modify :service_instance_id, :uuid
    end

    drop table(:service_instances)

    drop table(:billing_subscriptions)

    drop table(:workspace_tasks)

    drop table(:billing_customers)

    drop constraint(:file_notebooks, "file_notebooks_storage_resource_id_fkey")

    drop_if_exists index(:file_notebooks, [:file_id, :is_primary])

    drop_if_exists index(:file_notebooks, [:file_id, :relationship_type])

    drop_if_exists index(:file_notebooks, [:relationship_type])

    drop_if_exists index(:file_notebooks, [:created_at])

    drop table(:file_notebooks)

    drop constraint(:file_media, "file_media_storage_resource_id_fkey")

    drop_if_exists index(:file_media, [:file_id, :media_id])

    drop_if_exists index(:file_media, [:file_id, :is_primary])

    drop_if_exists index(:file_media, [:file_id, :relationship_type])

    drop_if_exists index(:file_media, [:media_id])

    drop_if_exists index(:file_media, [:relationship_type])

    drop_if_exists index(:file_media, [:created_at])

    drop table(:file_media)

    drop table(:tokens)

    drop_if_exists index(:deployment_events, [:team_id, :service_instance_id, :occurred_at])

    drop_if_exists index(:deployment_events, [:team_id, :workspace_id, :occurred_at])

    drop_if_exists index(:deployment_events, [:team_id, :occurred_at])

    drop_if_exists index(:deployment_events, [:team_id, :event_type, :occurred_at])

    drop_if_exists index(:deployment_events, [:team_id, :status, :occurred_at])

    drop_if_exists index(:deployment_events, [:team_id, :sequence_number, :service_instance_id])

    drop table(:deployment_events)

    drop table(:invitations)

    drop_if_exists index(:container_service_instances, [:team_id, :workspace_id, :status])

    drop_if_exists index(:container_service_instances, [:team_id, :service_type])

    drop_if_exists index(:container_service_instances, [:team_id, :workspace_id, :folder_path])

    drop table(:container_service_instances)
  end
end
