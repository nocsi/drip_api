defmodule Dirup.Repo.Migrations.MoveServiceMetricToMainSchema do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:service_metrics, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :metric_type, :text, null: false
      add :value, :decimal, null: false
      add :unit, :text, null: false
      add :metadata, :map, default: %{}
      add :team_id, :uuid, null: false

      add :recorded_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :service_instance_id,
          references(:container_service_instances,
            column: :id,
            name: "service_metrics_service_instance_id_fkey",
            type: :uuid,
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:service_metrics, [:team_id, :service_instance_id, :metric_type, :recorded_at])

    create index(:service_metrics, [:team_id, :service_instance_id])
  end

  def down do
    drop_if_exists index(:service_metrics, [:team_id, :service_instance_id])

    drop constraint(:service_metrics, "service_metrics_service_instance_id_fkey")

    drop_if_exists index(:service_metrics, [
                     :team_id,
                     :service_instance_id,
                     :metric_type,
                     :recorded_at
                   ])

    drop table(:service_metrics)
  end
end
