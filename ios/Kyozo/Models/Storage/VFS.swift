//
//  VFS.swift
//  Kyozo
//
//  Virtual File System models
//

import Foundation

// MARK: - VFS Models

/// Represents a virtual file generated by the VFS
public struct VFSFile: Codable, Identifiable {
  public let id: String
  public let name: String
  public let path: String
  public let type: String
  public let size: Int
  public let contentType: String
  public let createdAt: Date
  public let updatedAt: Date
  public let virtual: Bool
  public let icon: String?
  public let generator: String?

  private enum CodingKeys: String, CodingKey {
    case id, name, path, type, size
    case contentType = "content_type"
    case createdAt = "created_at"
    case updatedAt = "updated_at"
    case virtual, icon, generator
  }
}

/// Represents a directory listing with virtual files included
public struct VFSListing: Codable {
  public let path: String
  public let virtualCount: Int
  public let files: [VFSFile]

  private enum CodingKeys: String, CodingKey {
    case path
    case virtualCount = "virtual_count"
    case files
  }
}

/// Represents virtual file content
public struct VFSContent: Codable {
  public let path: String
  public let content: String
  public let virtual: Bool
  public let contentType: String

  private enum CodingKeys: String, CodingKey {
    case path, content, virtual
    case contentType = "content_type"
  }
}

/// Enum to represent different file system items
public enum FileSystemItem {
  case real(VFSFile)
  case virtual(VFSFile)
  case directory(VFSFile)

  var file: VFSFile {
    switch self {
    case .real(let file), .virtual(let file), .directory(let file):
      return file
    }
  }

  var isVirtual: Bool {
    switch self {
    case .virtual:
      return true
    default:
      return false
    }
  }

  var isDirectory: Bool {
    switch self {
    case .directory:
      return true
    default:
      return false
    }
  }

  var icon: String {
    switch self {
    case .virtual(let file):
      return file.icon ?? "✨"
    case .directory:
      return "📁"
    case .real(let file):
      return fileIcon(for: file.name)
    }
  }
}

// MARK: - Helper Functions

private func fileIcon(for filename: String) -> String {
  let ext = (filename as NSString).pathExtension.lowercased()

  switch ext {
  // Code files
  case "ex", "exs":
    return "💜"  // Elixir
  case "js", "ts", "jsx", "tsx":
    return "🟨"  // JavaScript/TypeScript
  case "py":
    return "🐍"  // Python
  case "rb":
    return "💎"  // Ruby
  case "rs":
    return "🦀"  // Rust
  case "go":
    return "🐹"  // Go
  case "swift":
    return "🦉"  // Swift

  // Config files
  case "json", "yaml", "yml", "toml":
    return "⚙️"
  case "env":
    return "🔐"

  // Documentation
  case "md", "markdown":
    return "📝"
  case "txt":
    return "📄"

  // Web files
  case "html", "htm":
    return "🌐"
  case "css", "scss", "sass":
    return "🎨"

  // Images
  case "png", "jpg", "jpeg", "gif", "svg", "webp":
    return "🖼️"

  // Archives
  case "zip", "tar", "gz", "rar":
    return "📦"

  // Docker
  case "dockerfile":
    return "🐳"

  default:
    return "📄"
  }
}
