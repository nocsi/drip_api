defmodule Kyozo.Repo.Migrations.Data do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop constraint(:workspace_tasks, "workspace_tasks_notebook_id_fkey")

    alter table(:workspace_tasks) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_tasks_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop constraint(:workspace_load_events, "workspace_load_events_notebook_id_fkey")

    alter table(:workspace_load_events) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_load_events_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create table(:user_identities, primary_key: false) do
      add :refresh_token, :text
      add :access_token_expires_at, :utc_datetime_usec
      add :access_token, :text
      add :uid, :text, null: false
      add :strategy, :text, null: false
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :user_id,
          references(:users,
            column: :id,
            name: "user_identities_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:user_identities, [:strategy, :uid, :user_id],
             name: "user_identities_unique_on_strategy_and_uid_and_user_id_index"
           )

    drop_if_exists index(:notebooks, [:team_id, :status])

    drop_if_exists index(:notebooks, [:workspace_id, :updated_at])

    drop_if_exists index(:notebooks, [:workspace_id, :status])

    drop_if_exists index(:notebooks, [:document_id])

    drop_if_exists index(:notebooks, [:document_id])

    drop constraint(:notebooks, "notebooks_document_id_fkey")

    alter table(:notebooks) do
      add :file_path, :text, null: false
      add :cells, {:array, :map}, default: []
    end

    drop_if_exists unique_index(:notebooks, [:document_id],
                     name: "notebooks_unique_document_notebook_index"
                   )

    rename table(:notebooks), :document_id, to: :file_id

    create index(:notebooks, [:team_id, :status])

    create index(:notebooks, [:team_id, :workspace_id, :updated_at])

    create index(:notebooks, [:team_id, :workspace_id, :status])

    create index(:notebooks, [:team_id, :file_id], unique: true)

    create table(:image_storages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "image"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams,
            column: :id,
            name: "image_storages_team_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "image_storages_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :file_id, :uuid, null: false
      add :original_image_id, :uuid
    end

    create index(:image_storages, [:created_at])

    create index(:image_storages, [:processing_status])

    create index(:image_storages, [:media_type, :relationship_type])

    create index(:image_storages, [:storage_resource_id])

    create index(:image_storages, [:file_id, :relationship_type])

    create index(:image_storages, [:file_id, :is_primary])

    create index(:image_storages, [:file_id, :storage_resource_id], unique: true)

    create table(:files, primary_key: false) do
      add :description_html, :text
      add :content_html, :text
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:notebooks) do
      modify :file_id,
             references(:files,
               column: :id,
               name: "notebooks_file_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:notebooks, [:team_id, :file_id],
             name: "notebooks_unique_file_notebook_index"
           )

    alter table(:image_storages) do
      modify :file_id,
             references(:files,
               column: :id,
               name: "image_storages_file_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :original_image_id,
             references(:image_storages,
               column: :id,
               name: "image_storages_original_image_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create index(:image_storages, [:file_id])

    alter table(:files) do
      add :name, :text, null: false
      add :file_path, :text, null: false
      add :content_type, :text, null: false, default: "text/plain"
      add :description, :text
      add :tags, {:array, :text}, default: []
      add :file_size, :bigint, default: 0
      add :storage_backend, :text, default: "hybrid"
      add :storage_metadata, :map, default: %{}
      add :version, :text
      add :checksum, :text
      add :is_directory, :boolean, null: false, default: false
      add :is_binary, :boolean, default: false
      add :is_notebook_file, :boolean, default: true
      add :render_cache, :map, default: %{}
      add :view_count, :bigint, default: 0
      add :last_viewed_at, :utc_datetime_usec
      add :deleted_at, :utc_datetime_usec

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "files_workspace_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :parent_file_id,
          references(:files,
            column: :id,
            name: "files_parent_file_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_member_id,
          references(:user_teams,
            column: :id,
            name: "files_team_member_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "files_team_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:files, [:team_id, :parent_file_id])

    create index(:files, [:team_id, :workspace_id, :parent_file_id])

    create index(:files, [:team_id, :workspace_id, :updated_at])

    create index(:files, [:team_id, :workspace_id, :name])

    create index(:files, [:team_id, :workspace_id, :file_path], unique: true)

    create index(:files, [:team_id, :is_directory])

    create index(:files, [:team_id, :updated_at])

    create index(:files, [:team_id, :storage_backend])

    create index(:files, [:team_id, :content_type])

    create index(:files, [:team_id, :name])

    create index(:files, [:team_id, :file_path], unique: true)

    create index(:files, [:team_id, :workspace_id])

    create index(:files, [:team_id, :team_member_id])

    create index(:files, [:team_id])

    create table(:file_storages, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "document"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams,
            column: :id,
            name: "file_storages_team_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "file_storages_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :file_id,
          references(:files,
            column: :id,
            name: "file_storages_file_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:file_storages, [:created_at])

    create index(:file_storages, [:processing_status])

    create index(:file_storages, [:media_type, :relationship_type])

    create index(:file_storages, [:file_id, :relationship_type])

    create index(:file_storages, [:file_id, :is_primary])

    create index(:file_storages, [:file_id, :storage_resource_id], unique: true)

    create index(:file_storages, [:storage_resource_id])

    create index(:file_storages, [:file_id])

    create table(:file_notebooks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "notebook"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams,
            column: :id,
            name: "file_notebooks_team_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "file_notebooks_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :file_id,
          references(:files,
            column: :id,
            name: "file_notebooks_file_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :notebook_id,
          references(:notebooks,
            column: :id,
            name: "file_notebooks_notebook_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create index(:file_notebooks, [:created_at])

    create index(:file_notebooks, [:relationship_type])

    create index(:file_notebooks, [:notebook_id])

    create index(:file_notebooks, [:file_id, :relationship_type])

    create index(:file_notebooks, [:file_id, :is_primary])

    create index(:file_notebooks, [:file_id, :notebook_id], unique: true)

    create index(:file_notebooks, [:storage_resource_id])

    create index(:file_notebooks, [:file_id])

    create table(:file_media, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :storage_resource_id, :uuid, null: false
      add :relationship_type, :text, null: false, default: "primary"
      add :media_type, :text, null: false, default: "image"
      add :is_primary, :boolean, null: false, default: false
      add :priority, :bigint, default: 100
      add :metadata, :map, default: %{}
      add :processing_status, :text, default: "ready"
      add :processing_error, :text
      add :expires_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id,
          references(:teams,
            column: :id,
            name: "file_media_team_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "file_media_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )

      add :file_id,
          references(:files,
            column: :id,
            name: "file_media_file_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:file_media, [:created_at])

    create index(:file_media, [:relationship_type])

    create index(:file_media, [:file_id, :relationship_type])

    create index(:file_media, [:file_id, :is_primary])

    create index(:file_media, [:storage_resource_id])

    create index(:file_media, [:file_id])
  end

  def down do
    drop_if_exists index(:file_media, [:file_id])

    drop_if_exists index(:file_media, [:storage_resource_id])

    drop constraint(:file_media, "file_media_storage_resource_id_fkey")

    drop constraint(:file_media, "file_media_team_id_fkey")

    drop constraint(:file_media, "file_media_user_id_fkey")

    drop constraint(:file_media, "file_media_file_id_fkey")

    drop_if_exists index(:file_media, [:file_id, :media_id])

    drop_if_exists index(:file_media, [:file_id, :is_primary])

    drop_if_exists index(:file_media, [:file_id, :relationship_type])

    drop_if_exists index(:file_media, [:media_id])

    drop_if_exists index(:file_media, [:storage_resource_id])

    drop_if_exists index(:file_media, [:relationship_type])

    drop_if_exists index(:file_media, [:created_at])

    drop table(:file_media)

    drop_if_exists index(:file_notebooks, [:notebook_id])

    drop_if_exists index(:file_notebooks, [:file_id])

    drop_if_exists index(:file_notebooks, [:storage_resource_id])

    drop constraint(:file_notebooks, "file_notebooks_storage_resource_id_fkey")

    drop constraint(:file_notebooks, "file_notebooks_team_id_fkey")

    drop constraint(:file_notebooks, "file_notebooks_user_id_fkey")

    drop constraint(:file_notebooks, "file_notebooks_file_id_fkey")

    drop constraint(:file_notebooks, "file_notebooks_notebook_id_fkey")

    drop_if_exists index(:file_notebooks, [:file_id, :notebook_id])

    drop_if_exists index(:file_notebooks, [:file_id, :is_primary])

    drop_if_exists index(:file_notebooks, [:file_id, :relationship_type])

    drop_if_exists index(:file_notebooks, [:notebook_id])

    drop_if_exists index(:file_notebooks, [:storage_resource_id])

    drop_if_exists index(:file_notebooks, [:relationship_type])

    drop_if_exists index(:file_notebooks, [:created_at])

    drop table(:file_notebooks)

    drop_if_exists index(:file_storages, [:file_id])

    drop_if_exists index(:file_storages, [:storage_resource_id])

    drop constraint(:file_storages, "file_storages_storage_resource_id_fkey")

    drop constraint(:file_storages, "file_storages_team_id_fkey")

    drop constraint(:file_storages, "file_storages_user_id_fkey")

    drop constraint(:file_storages, "file_storages_file_id_fkey")

    drop_if_exists index(:file_storages, [:file_id, :storage_resource_id])

    drop_if_exists index(:file_storages, [:file_id, :is_primary])

    drop_if_exists index(:file_storages, [:file_id, :relationship_type])

    drop_if_exists index(:file_storages, [:storage_resource_id])

    drop_if_exists index(:file_storages, [:media_type, :relationship_type])

    drop_if_exists index(:file_storages, [:processing_status])

    drop_if_exists index(:file_storages, [:created_at])

    drop table(:file_storages)

    drop_if_exists index(:files, [:team_id])

    drop_if_exists index(:files, [:team_id, :team_member_id])

    drop_if_exists index(:files, [:team_id, :workspace_id])

    drop constraint(:files, "files_workspace_id_fkey")

    drop constraint(:files, "files_parent_file_id_fkey")

    drop constraint(:files, "files_team_member_id_fkey")

    drop constraint(:files, "files_team_id_fkey")

    drop_if_exists index(:files, [:team_id, :file_path])

    drop_if_exists index(:files, [:team_id, :name])

    drop_if_exists index(:files, [:team_id, :content_type])

    drop_if_exists index(:files, [:team_id, :storage_backend])

    drop_if_exists index(:files, [:team_id, :updated_at])

    drop_if_exists index(:files, [:team_id, :is_directory])

    drop_if_exists index(:files, [:team_id, :workspace_id, :file_path])

    drop_if_exists index(:files, [:team_id, :workspace_id, :name])

    drop_if_exists index(:files, [:team_id, :workspace_id, :updated_at])

    drop_if_exists index(:files, [:team_id, :workspace_id, :parent_file_id])

    drop_if_exists index(:files, [:team_id, :parent_file_id])

    alter table(:files) do
      remove :team_id
      remove :team_member_id
      remove :updated_at
      remove :created_at
      remove :parent_file_id
      remove :workspace_id
      remove :deleted_at
      remove :last_viewed_at
      remove :view_count
      remove :render_cache
      remove :is_notebook_file
      remove :is_binary
      remove :is_directory
      remove :checksum
      remove :version
      remove :storage_metadata
      remove :storage_backend
      remove :file_size
      remove :tags
      remove :description
      remove :content_type
      remove :file_path
      remove :name
    end

    drop_if_exists index(:image_storages, [:file_id])

    drop_if_exists index(:image_storages, [:storage_resource_id])

    drop constraint(:image_storages, "image_storages_file_id_fkey")

    drop constraint(:image_storages, "image_storages_original_image_id_fkey")

    alter table(:image_storages) do
      modify :original_image_id, :uuid
      modify :file_id, :uuid
    end

    drop_if_exists unique_index(:notebooks, [:team_id, :file_id],
                     name: "notebooks_unique_file_notebook_index"
                   )

    drop constraint(:notebooks, "notebooks_file_id_fkey")

    alter table(:notebooks) do
      modify :file_id,
             references(:documents,
               column: :id,
               name: "notebooks_document_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop table(:files)

    drop constraint(:image_storages, "image_storages_storage_resource_id_fkey")

    drop constraint(:image_storages, "image_storages_team_id_fkey")

    drop constraint(:image_storages, "image_storages_user_id_fkey")

    drop_if_exists index(:image_storages, [:file_id, :storage_resource_id])

    drop_if_exists index(:image_storages, [:file_id, :is_primary])

    drop_if_exists index(:image_storages, [:file_id, :relationship_type])

    drop_if_exists index(:image_storages, [:storage_resource_id])

    drop_if_exists index(:image_storages, [:media_type, :relationship_type])

    drop_if_exists index(:image_storages, [:processing_status])

    drop_if_exists index(:image_storages, [:created_at])

    drop table(:image_storages)

    drop_if_exists index(:notebooks, [:team_id, :file_id])

    drop_if_exists index(:notebooks, [:team_id, :workspace_id, :status])

    drop_if_exists index(:notebooks, [:team_id, :workspace_id, :updated_at])

    drop_if_exists index(:notebooks, [:team_id, :status])

    rename table(:notebooks), :file_id, to: :document_id

    create unique_index(:notebooks, [:document_id],
             name: "notebooks_unique_document_notebook_index"
           )

    alter table(:notebooks) do
      remove :cells
      remove :file_path
    end

    create index(:notebooks, [:document_id])

    create index(:notebooks, [:document_id], unique: true)

    create index(:notebooks, [:workspace_id, :status])

    create index(:notebooks, [:workspace_id, :updated_at])

    create index(:notebooks, [:team_id, :status])

    drop_if_exists unique_index(:user_identities, [:strategy, :uid, :user_id],
                     name: "user_identities_unique_on_strategy_and_uid_and_user_id_index"
                   )

    drop constraint(:user_identities, "user_identities_user_id_fkey")

    drop table(:user_identities)

    drop constraint(:workspace_load_events, "workspace_load_events_notebook_id_fkey")

    alter table(:workspace_load_events) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_load_events_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    drop constraint(:workspace_tasks, "workspace_tasks_notebook_id_fkey")

    alter table(:workspace_tasks) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_tasks_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end
  end
end
