defmodule Kyozo.Repo.Migrations.New do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:workspaces, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :name, :text, null: false
      add :description, :text
      add :status, :text, null: false, default: "active"
      add :storage_backend, :text, null: false, default: "hybrid"
      add :settings, :map, default: %{}
      add :tags, {:array, :text}, default: []
      add :storage_path, :text
      add :storage_metadata, :map, default: %{}
      add :git_repository_url, :text
      add :git_branch, :text, default: "main"
      add :archived_at, :utc_datetime_usec
      add :deleted_at, :utc_datetime_usec

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_id, :uuid, null: false
      add :created_by_id, :uuid
    end

    create index(:workspaces, [:team_id, :created_at])

    create index(:workspaces, [:team_id, :updated_at])

    create index(:workspaces, [:team_id, :storage_backend])

    create index(:workspaces, [:team_id, :status])

    create index(:workspaces, [:team_id, :name], unique: true)

    create table(:workspace_tasks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "workspace_tasks_workspace_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :name, :text, null: false
      add :is_name_generated, :boolean, null: false, default: false
      add :language, :text
      add :code, :text, null: false
      add :description, :text
      add :line_start, :bigint
      add :line_end, :bigint
      add :order_index, :bigint, null: false, default: 0
      add :execution_count, :bigint, null: false, default: 0
      add :last_execution_status, :text
      add :last_execution_output, :text
      add :last_execution_error, :text
      add :execution_time_ms, :bigint
      add :is_executable, :boolean, null: false, default: true
      add :requires_input, :boolean, null: false, default: false
      add :dependencies, {:array, :text}, default: []
      add :environment_variables, :map, default: %{}
      add :working_directory, :text
      add :timeout_seconds, :bigint, default: 30
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_executed_at, :utc_datetime_usec
      add :notebook_id, :uuid, null: false
    end

    create table(:workspace_load_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :event_type, :text, null: false
      add :event_data, :map, default: %{}
      add :path, :text
      add :error_message, :text
      add :task_name, :text
      add :task_workspace_id, :text
      add :is_task_name_generated, :boolean
      add :processing_time_ms, :bigint
      add :sequence_number, :bigint, null: false, default: 0

      add :occurred_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "workspace_load_events_workspace_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :notebook_id, :uuid
      add :task_id, :uuid
    end

    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :name, :text, null: false
      add :email, :citext, null: false
      add :current_team, :text
      add :hashed_password, :text
      add :picture, :text
      add :confirmed_at, :utc_datetime_usec
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:user_teams, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :role, :text, null: false, default: "member"

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "user_teams_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :team_id, :uuid, null: false
    end

    create table(:tokens, primary_key: false) do
      add :jti, :text, null: false, primary_key: true
      add :subject, :text, null: false
      add :expires_at, :utc_datetime, null: false
      add :purpose, :text, null: false
      add :extra_data, :map

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:teams, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:workspaces) do
      modify :team_id,
             references(:teams,
               column: :id,
               name: "workspaces_team_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :created_by_id,
             references(:users,
               column: :id,
               name: "workspaces_created_by_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :nilify_all
             )
    end

    create index(:workspaces, [:team_id])

    create index(:workspaces, [:team_id, :created_by_id])

    alter table(:user_teams) do
      modify :team_id,
             references(:teams,
               column: :id,
               name: "user_teams_team_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:user_teams, [:team_id, :user_id],
             name: "user_teams_unique_user_membership_index"
           )

    alter table(:teams) do
      add :name, :text, null: false
      add :domain, :text, null: false
      add :description, :text

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :owner_user_id,
          references(:users,
            column: :id,
            name: "teams_owner_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create table(:roles, primary_key: false) do
      add :name, :text, null: false, primary_key: true
    end

    create table(:projects, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :path, :text, null: false
      add :type, :text, null: false, default: "directory"
      add :name, :text, null: false
      add :status, :text, null: false, default: "loading"
      add :identity_mode, :text, null: false, default: "unspecified"
      add :options, :map, null: false, default: %{}
      add :error_message, :text
      add :document_count, :bigint, default: 0
      add :task_count, :bigint, default: 0

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "projects_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:projects, [:user_id, :path], name: "projects_unique_user_path_index")

    create table(:project_tasks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :runme_id, :text
      add :name, :text, null: false
      add :is_name_generated, :boolean, null: false, default: false
      add :language, :text
      add :code, :text, null: false
      add :description, :text
      add :line_start, :bigint
      add :line_end, :bigint
      add :order_index, :bigint, null: false, default: 0
      add :execution_count, :bigint, null: false, default: 0
      add :last_execution_status, :text
      add :last_execution_output, :text
      add :last_execution_error, :text
      add :execution_time_ms, :bigint
      add :is_executable, :boolean, null: false, default: true
      add :requires_input, :boolean, null: false, default: false
      add :dependencies, {:array, :text}, default: []
      add :environment_variables, :map, default: %{}
      add :working_directory, :text
      add :timeout_seconds, :bigint, default: 30
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_executed_at, :utc_datetime_usec

      add :project_id,
          references(:projects,
            column: :id,
            name: "project_tasks_project_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :document_id, :uuid, null: false
    end

    create table(:project_load_events, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :event_type, :text, null: false
      add :event_data, :map, default: %{}
      add :path, :text
      add :error_message, :text
      add :task_name, :text
      add :task_runme_id, :text
      add :is_task_name_generated, :boolean
      add :processing_time_ms, :bigint
      add :sequence_number, :bigint, null: false, default: 0

      add :occurred_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :project_id,
          references(:projects,
            column: :id,
            name: "project_load_events_project_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :document_id, :uuid
      add :task_id, :uuid
    end

    create table(:project_documents, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:project_tasks) do
      modify :document_id,
             references(:project_documents,
               column: :id,
               name: "project_tasks_document_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:project_tasks, [:document_id, :order_index],
             name: "project_tasks_unique_document_order_index"
           )

    create unique_index(:project_tasks, [:document_id, :runme_id],
             name: "project_tasks_unique_document_runme_id_index",
             where: "(runme_id IS NOT NULL)"
           )

    alter table(:project_load_events) do
      modify :document_id,
             references(:project_documents,
               column: :id,
               name: "project_load_events_document_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :task_id,
             references(:project_tasks,
               column: :id,
               name: "project_load_events_task_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:project_load_events, [:project_id, :sequence_number],
             name: "project_load_events_unique_project_sequence_index"
           )

    alter table(:project_documents) do
      add :path, :text, null: false
      add :absolute_path, :text, null: false
      add :filename, :text, null: false
      add :name, :text, null: false
      add :extension, :text, null: false, default: ".md"
      add :content, :text
      add :parsed_content, :map
      add :status, :text, null: false, default: "pending"
      add :error_message, :text
      add :size_bytes, :bigint
      add :line_count, :bigint
      add :task_count, :bigint, default: 0
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :parsed_at, :utc_datetime_usec
      add :modified_at, :utc_datetime_usec

      add :project_id,
          references(:projects,
            column: :id,
            name: "project_documents_project_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:project_documents, [:project_id, :path],
             name: "project_documents_unique_project_path_index"
           )

    create table(:notebooks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:workspace_tasks) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_tasks_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:workspace_tasks, [:notebook_id, :order_index],
             name: "workspace_tasks_unique_notebook_order_index"
           )

    create unique_index(:workspace_tasks, [:notebook_id, :workspace_id],
             name: "workspace_tasks_unique_notebook_workspace_id_index",
             where: "(workspace_id IS NOT NULL)"
           )

    alter table(:workspace_load_events) do
      modify :notebook_id,
             references(:notebooks,
               column: :id,
               name: "workspace_load_events_notebook_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :task_id,
             references(:workspace_tasks,
               column: :id,
               name: "workspace_load_events_task_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create unique_index(:workspace_load_events, [:workspace_id, :sequence_number],
             name: "workspace_load_events_unique_workspace_sequence_index"
           )

    alter table(:notebooks) do
      add :title, :text, null: false
      add :content, :text
      add :content_html, :text
      add :status, :text, null: false, default: "draft"
      add :execution_state, :map, default: %{}
      add :extracted_tasks, {:array, :map}, default: []
      add :execution_order, {:array, :text}, default: []
      add :current_task_index, :bigint, default: 0
      add :total_execution_time, :bigint, default: 0
      add :last_executed_at, :utc_datetime_usec
      add :execution_count, :bigint, null: false, default: 0
      add :auto_save_enabled, :boolean, null: false, default: true
      add :collaborative_mode, :boolean, null: false, default: false
      add :kernel_status, :text, default: "idle"
      add :environment_variables, :map, default: %{}
      add :execution_timeout, :bigint, default: 300
      add :render_cache, :map, default: %{}
      add :metadata, :map, default: %{}

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :last_accessed_at, :utc_datetime_usec
      add :document_id, :uuid, null: false
      add :workspace_id, :uuid, null: false
      add :team_id, :uuid, null: false
    end

    create index(:notebooks, [:team_id, :status])

    create index(:notebooks, [:workspace_id, :updated_at])

    create index(:notebooks, [:workspace_id, :status])

    create table(:invitations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :invited_user_id,
          references(:users,
            column: :id,
            name: "invitations_invited_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :inviter_user_id,
          references(:users,
            column: :id,
            name: "invitations_inviter_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "invitations_team_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:invitations, [:team_id])

    create unique_index(:invitations, [:team_id, :invited_user_id],
             name: "invitations_unique_user_invitation_index"
           )

    create table(:documents, primary_key: false) do
      add :description_html, :text
      add :content_html, :text
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:notebooks) do
      modify :document_id,
             references(:documents,
               column: :id,
               name: "notebooks_document_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :workspace_id,
             references(:workspaces,
               column: :id,
               name: "notebooks_workspace_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )

      modify :team_id,
             references(:teams,
               column: :id,
               name: "notebooks_team_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create index(:notebooks, [:workspace_id])

    create index(:notebooks, [:team_id])

    create unique_index(:notebooks, [:document_id],
             name: "notebooks_unique_document_notebook_index"
           )

    alter table(:documents) do
      add :title, :text, null: false
      add :file_path, :text, null: false
      add :content_type, :text, null: false, default: "text/plain"
      add :description, :text
      add :tags, {:array, :text}, default: []
      add :file_size, :bigint, default: 0
      add :storage_backend, :text, default: "hybrid"
      add :storage_metadata, :map, default: %{}
      add :version, :text
      add :checksum, :text
      add :is_binary, :boolean, default: false
      add :render_cache, :map, default: %{}
      add :view_count, :bigint, default: 0
      add :last_viewed_at, :utc_datetime_usec
      add :deleted_at, :utc_datetime_usec

      add :workspace_id,
          references(:workspaces,
            column: :id,
            name: "documents_workspace_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :team_member_id,
          references(:user_teams,
            column: :id,
            name: "documents_team_member_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :team_id,
          references(:teams,
            column: :id,
            name: "documents_team_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create index(:documents, [:team_id, :workspace_id, :updated_at])

    create index(:documents, [:team_id, :workspace_id, :title])

    create index(:documents, [:team_id, :workspace_id, :file_path], unique: true)

    create index(:documents, [:team_id, :updated_at])

    create index(:documents, [:team_id, :storage_backend])

    create index(:documents, [:team_id, :content_type])

    create index(:documents, [:team_id, :title])

    create index(:documents, [:team_id, :file_path], unique: true)

    create index(:documents, [:team_id, :workspace_id])

    create index(:documents, [:team_id, :team_member_id])

    create index(:documents, [:team_id])

    create table(:document_blob_refs, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :ref_type, :text, null: false, default: "content"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :document_id,
          references(:documents,
            column: :id,
            name: "document_blob_refs_document_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :blob_id, :uuid, null: false
    end

    create index(:document_blob_refs, [:ref_type])

    create index(:document_blob_refs, [:document_id])

    create table(:blobs, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:document_blob_refs) do
      modify :blob_id,
             references(:blobs,
               column: :id,
               name: "document_blob_refs_blob_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    create index(:document_blob_refs, [:blob_id])

    alter table(:blobs) do
      add :hash, :text, null: false
      add :size, :bigint, null: false
      add :content_type, :text, null: false, default: "application/octet-stream"
      add :encoding, :text, default: "utf-8"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:blobs, [:created_at])

    create index(:blobs, [:size])

    create index(:blobs, [:content_type])

    create index(:blobs, [:hash], unique: true)

    create table(:api_keys, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :api_key_hash, :binary, null: false
      add :expires_at, :utc_datetime_usec, null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "api_keys_user_id_fkey",
            type: :uuid,
            prefix: "public"
          )
    end

    create unique_index(:api_keys, [:api_key_hash], name: "api_keys_unique_api_key_index")
  end

  def down do
    drop_if_exists unique_index(:api_keys, [:api_key_hash], name: "api_keys_unique_api_key_index")

    drop constraint(:api_keys, "api_keys_user_id_fkey")

    drop table(:api_keys)

    drop_if_exists index(:blobs, [:hash])

    drop_if_exists index(:blobs, [:content_type])

    drop_if_exists index(:blobs, [:size])

    drop_if_exists index(:blobs, [:created_at])

    alter table(:blobs) do
      remove :created_at
      remove :encoding
      remove :content_type
      remove :size
      remove :hash
    end

    drop_if_exists index(:document_blob_refs, [:blob_id])

    drop_if_exists index(:document_blob_refs, [:document_id])

    drop constraint(:document_blob_refs, "document_blob_refs_blob_id_fkey")

    alter table(:document_blob_refs) do
      modify :blob_id, :uuid
    end

    drop table(:blobs)

    drop constraint(:document_blob_refs, "document_blob_refs_document_id_fkey")

    drop_if_exists index(:document_blob_refs, [:document_id, :ref_type])

    drop_if_exists index(:document_blob_refs, [:blob_id])

    drop_if_exists index(:document_blob_refs, [:document_id])

    drop_if_exists index(:document_blob_refs, [:ref_type])

    drop table(:document_blob_refs)

    drop_if_exists index(:documents, [:team_id])

    drop_if_exists index(:documents, [:team_id, :team_member_id])

    drop_if_exists index(:documents, [:team_id, :workspace_id])

    drop constraint(:documents, "documents_workspace_id_fkey")

    drop constraint(:documents, "documents_team_member_id_fkey")

    drop constraint(:documents, "documents_team_id_fkey")

    drop_if_exists index(:documents, [:team_id, :file_path])

    drop_if_exists index(:documents, [:team_id, :title])

    drop_if_exists index(:documents, [:team_id, :content_type])

    drop_if_exists index(:documents, [:team_id, :storage_backend])

    drop_if_exists index(:documents, [:team_id, :updated_at])

    drop_if_exists index(:documents, [:team_id, :workspace_id, :file_path])

    drop_if_exists index(:documents, [:team_id, :workspace_id, :title])

    drop_if_exists index(:documents, [:team_id, :workspace_id, :updated_at])

    alter table(:documents) do
      remove :team_id
      remove :team_member_id
      remove :updated_at
      remove :created_at
      remove :workspace_id
      remove :deleted_at
      remove :last_viewed_at
      remove :view_count
      remove :render_cache
      remove :is_binary
      remove :checksum
      remove :version
      remove :storage_metadata
      remove :storage_backend
      remove :file_size
      remove :tags
      remove :description
      remove :content_type
      remove :file_path
      remove :title
    end

    drop_if_exists unique_index(:notebooks, [:document_id],
                     name: "notebooks_unique_document_notebook_index"
                   )

    drop_if_exists index(:notebooks, [:team_id])

    drop_if_exists index(:notebooks, [:workspace_id])

    drop_if_exists index(:notebooks, [:document_id])

    drop constraint(:notebooks, "notebooks_document_id_fkey")

    drop constraint(:notebooks, "notebooks_workspace_id_fkey")

    drop constraint(:notebooks, "notebooks_team_id_fkey")

    alter table(:notebooks) do
      modify :team_id, :uuid
      modify :workspace_id, :uuid
      modify :document_id, :uuid
    end

    drop table(:documents)

    drop_if_exists unique_index(:invitations, [:team_id, :invited_user_id],
                     name: "invitations_unique_user_invitation_index"
                   )

    drop_if_exists index(:invitations, [:team_id])

    drop constraint(:invitations, "invitations_invited_user_id_fkey")

    drop constraint(:invitations, "invitations_inviter_user_id_fkey")

    drop constraint(:invitations, "invitations_team_id_fkey")

    drop table(:invitations)

    drop_if_exists index(:notebooks, [:document_id])

    drop_if_exists index(:notebooks, [:workspace_id, :status])

    drop_if_exists index(:notebooks, [:workspace_id, :updated_at])

    drop_if_exists index(:notebooks, [:team_id, :status])

    alter table(:notebooks) do
      remove :team_id
      remove :workspace_id
      remove :document_id
      remove :last_accessed_at
      remove :updated_at
      remove :created_at
      remove :metadata
      remove :render_cache
      remove :execution_timeout
      remove :environment_variables
      remove :kernel_status
      remove :collaborative_mode
      remove :auto_save_enabled
      remove :execution_count
      remove :last_executed_at
      remove :total_execution_time
      remove :current_task_index
      remove :execution_order
      remove :extracted_tasks
      remove :execution_state
      remove :status
      remove :content_html
      remove :content
      remove :title
    end

    drop_if_exists unique_index(:workspace_load_events, [:workspace_id, :sequence_number],
                     name: "workspace_load_events_unique_workspace_sequence_index"
                   )

    drop constraint(:workspace_load_events, "workspace_load_events_notebook_id_fkey")

    drop constraint(:workspace_load_events, "workspace_load_events_task_id_fkey")

    alter table(:workspace_load_events) do
      modify :task_id, :uuid
      modify :notebook_id, :uuid
    end

    drop_if_exists unique_index(:workspace_tasks, [:notebook_id, :workspace_id],
                     name: "workspace_tasks_unique_notebook_workspace_id_index"
                   )

    drop_if_exists unique_index(:workspace_tasks, [:notebook_id, :order_index],
                     name: "workspace_tasks_unique_notebook_order_index"
                   )

    drop constraint(:workspace_tasks, "workspace_tasks_notebook_id_fkey")

    alter table(:workspace_tasks) do
      modify :notebook_id, :uuid
    end

    drop table(:notebooks)

    drop_if_exists unique_index(:project_documents, [:project_id, :path],
                     name: "project_documents_unique_project_path_index"
                   )

    drop constraint(:project_documents, "project_documents_project_id_fkey")

    alter table(:project_documents) do
      remove :project_id
      remove :modified_at
      remove :parsed_at
      remove :updated_at
      remove :created_at
      remove :metadata
      remove :task_count
      remove :line_count
      remove :size_bytes
      remove :error_message
      remove :status
      remove :parsed_content
      remove :content
      remove :extension
      remove :name
      remove :filename
      remove :absolute_path
      remove :path
    end

    drop_if_exists unique_index(:project_load_events, [:project_id, :sequence_number],
                     name: "project_load_events_unique_project_sequence_index"
                   )

    drop constraint(:project_load_events, "project_load_events_document_id_fkey")

    drop constraint(:project_load_events, "project_load_events_task_id_fkey")

    alter table(:project_load_events) do
      modify :task_id, :uuid
      modify :document_id, :uuid
    end

    drop_if_exists unique_index(:project_tasks, [:document_id, :runme_id],
                     name: "project_tasks_unique_document_runme_id_index"
                   )

    drop_if_exists unique_index(:project_tasks, [:document_id, :order_index],
                     name: "project_tasks_unique_document_order_index"
                   )

    drop constraint(:project_tasks, "project_tasks_document_id_fkey")

    alter table(:project_tasks) do
      modify :document_id, :uuid
    end

    drop table(:project_documents)

    drop constraint(:project_load_events, "project_load_events_project_id_fkey")

    drop table(:project_load_events)

    drop constraint(:project_tasks, "project_tasks_project_id_fkey")

    drop table(:project_tasks)

    drop_if_exists unique_index(:projects, [:user_id, :path],
                     name: "projects_unique_user_path_index"
                   )

    drop constraint(:projects, "projects_user_id_fkey")

    drop table(:projects)

    drop table(:roles)

    drop constraint(:teams, "teams_owner_user_id_fkey")

    alter table(:teams) do
      remove :owner_user_id
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :domain
      remove :name
    end

    drop_if_exists unique_index(:user_teams, [:team_id, :user_id],
                     name: "user_teams_unique_user_membership_index"
                   )

    drop constraint(:user_teams, "user_teams_team_id_fkey")

    alter table(:user_teams) do
      modify :team_id, :uuid
    end

    drop_if_exists index(:workspaces, [:team_id, :created_by_id])

    drop_if_exists index(:workspaces, [:team_id])

    drop constraint(:workspaces, "workspaces_team_id_fkey")

    drop constraint(:workspaces, "workspaces_created_by_id_fkey")

    alter table(:workspaces) do
      modify :created_by_id, :uuid
      modify :team_id, :uuid
    end

    drop table(:teams)

    drop table(:tokens)

    drop constraint(:user_teams, "user_teams_user_id_fkey")

    drop table(:user_teams)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)

    drop constraint(:workspace_load_events, "workspace_load_events_workspace_id_fkey")

    drop table(:workspace_load_events)

    drop constraint(:workspace_tasks, "workspace_tasks_workspace_id_fkey")

    drop table(:workspace_tasks)

    drop_if_exists index(:workspaces, [:team_id, :name])

    drop_if_exists index(:workspaces, [:team_id, :status])

    drop_if_exists index(:workspaces, [:team_id, :storage_backend])

    drop_if_exists index(:workspaces, [:team_id, :updated_at])

    drop_if_exists index(:workspaces, [:team_id, :created_at])

    drop table(:workspaces)
  end
end
