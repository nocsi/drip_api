defmodule Kyozo.Repo.TenantMigrations.Data do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:storage_resources, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :locator_id, :text, null: false
      add :file_name, :text, null: false
      add :mime_type, :text, null: false, default: "application/octet-stream"
      add :file_size, :bigint, null: false
      add :checksum, :text, null: false
      add :version, :text, null: false, default: "1"
      add :storage_backend, :text, null: false, default: "hybrid"
      add :storage_metadata, :map, default: %{}
      add :is_versioned, :boolean, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create index(:storage_resources, [:created_at])

    create index(:storage_resources, [:is_versioned])

    create index(:storage_resources, [:checksum])

    create index(:storage_resources, [:file_size])

    create index(:storage_resources, [:mime_type])

    create index(:storage_resources, [:storage_backend])

    create index(:storage_resources, [:locator_id], unique: true)
  end

  def down do
    drop_if_exists index(:storage_resources, [:locator_id])

    drop_if_exists index(:storage_resources, [:storage_backend])

    drop_if_exists index(:storage_resources, [:mime_type])

    drop_if_exists index(:storage_resources, [:file_size])

    drop_if_exists index(:storage_resources, [:checksum])

    drop_if_exists index(:storage_resources, [:is_versioned])

    drop_if_exists index(:storage_resources, [:created_at])

    drop table(:storage_resources, prefix: prefix())
  end
end
