defmodule Kyozo.Repo.TenantMigrations.New do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_groups, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :group_id, :uuid, null: false
      add :user_id, :uuid, null: false
    end

    create table(:notifications, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :sender_user_id, :uuid

      add :recipient_user_id,
          references(:users,
            column: :id,
            name: "notifications_recipient_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :subject, :text, null: false
      add :body, :text, null: false
      add :read_at, :utc_datetime
      add :status, :text, null: false, default: "unread"
      add :processed, :boolean, null: false, default: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:groups, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:user_groups, prefix: prefix()) do
      modify :group_id,
             references(:groups,
               column: :id,
               name: "user_groups_group_id_fkey",
               type: :uuid,
               prefix: prefix()
             )

      modify :user_id,
             references(:users,
               column: :id,
               name: "user_groups_user_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:user_groups, [:group_id, :user_id],
             name: "user_groups_unique_name_index"
           )

    alter table(:groups, prefix: prefix()) do
      add :name, :text, null: false
      add :description, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create unique_index(:groups, [:name], name: "groups_unique_name_index")

    create table(:group_permissions, primary_key: false, prefix: prefix()) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :action, :text, null: false
      add :resource, :text, null: false

      add :inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :group_id,
          references(:groups,
            column: :id,
            name: "group_permissions_group_id_fkey",
            type: :uuid,
            prefix: prefix()
          ),
          null: false
    end

    create unique_index(:group_permissions, [:group_id, :resource, :action],
             name: "group_permissions_unique_group_permission_index"
           )
  end

  def down do
    drop_if_exists unique_index(:group_permissions, [:group_id, :resource, :action],
                     name: "group_permissions_unique_group_permission_index"
                   )

    drop constraint(:group_permissions, "group_permissions_group_id_fkey")

    drop table(:group_permissions, prefix: prefix())

    drop_if_exists unique_index(:groups, [:name], name: "groups_unique_name_index")

    alter table(:groups, prefix: prefix()) do
      remove :updated_at
      remove :inserted_at
      remove :description
      remove :name
    end

    drop_if_exists unique_index(:user_groups, [:group_id, :user_id],
                     name: "user_groups_unique_name_index"
                   )

    drop constraint(:user_groups, "user_groups_group_id_fkey")

    drop constraint(:user_groups, "user_groups_user_id_fkey")

    alter table(:user_groups, prefix: prefix()) do
      modify :user_id, :uuid
      modify :group_id, :uuid
    end

    drop table(:groups, prefix: prefix())

    drop constraint(:notifications, "notifications_recipient_user_id_fkey")

    drop table(:notifications, prefix: prefix())

    drop table(:user_groups, prefix: prefix())
  end
end
