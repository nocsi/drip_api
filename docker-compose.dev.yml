version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: kyozo_postgres
    environment:
      POSTGRES_DB: kyozo_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./priv/repo/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d kyozo_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kyozo_network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: kyozo_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - kyozo_network

  # MinIO for S3-compatible object storage (development only)
  minio:
    image: minio/minio:latest
    container_name: kyozo_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - kyozo_network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: kyozo_mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - kyozo_network

  # Kyozo API application (development)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - MIX_ENV=dev
    container_name: kyozo_app_dev
    environment:
      MIX_ENV: dev
      PHX_HOST: localhost
      PHX_SERVER: "true"
      PORT: 4000
      DATABASE_URL: "ecto://postgres:postgres@postgres:5432/kyozo_dev"
      REDIS_URL: "redis://redis:6379"
      SECRET_KEY_BASE: "dev_secret_key_base_change_me_in_production"
      LIVE_VIEW_SIGNING_SALT: "dev_live_view_salt"
      GUARDIAN_SECRET_KEY: "dev_guardian_secret_change_me_in_production"
      # Email settings for development
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USERNAME: ""
      SMTP_PASSWORD: ""
      FROM_EMAIL: "no-reply@kyozo.local"
      # Object storage settings
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_S3_ENDPOINT: http://minio:9000
      AWS_S3_BUCKET: kyozo-dev
      # OAuth settings (set these in .env file)
      OAUTH_GITHUB_CLIENT_ID: ${OAUTH_GITHUB_CLIENT_ID:-}
      OAUTH_GITHUB_CLIENT_SECRET: ${OAUTH_GITHUB_CLIENT_SECRET:-}
      OAUTH_GOOGLE_CLIENT_ID: ${OAUTH_GOOGLE_CLIENT_ID:-}
      OAUTH_GOOGLE_CLIENT_SECRET: ${OAUTH_GOOGLE_CLIENT_SECRET:-}
    ports:
      - "4000:4000"
      - "4001:4001"  # LiveReload
    volumes:
      - .:/app
      - /app/_build
      - /app/deps
      - /app/assets/node_modules
      - uploads_data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kyozo_network
    stdin_open: true
    tty: true

  # Nginx for reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: kyozo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./assets/static:/var/www/static:ro
    depends_on:
      - app
    networks:
      - kyozo_network
    profiles:
      - nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  uploads_data:
    driver: local

networks:
  kyozo_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16